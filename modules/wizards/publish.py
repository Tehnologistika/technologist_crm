from modules.helpers import _clean_optional, BACK_PATTERN, _norm_inn, format_company_requisites
from modules.company_service import _get_company, _save_company
from sheets import add_request_row

# Telegram imports
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CallbackQueryHandler

# Standard libraries

import re
import requests

# --------------------------------------------------------------------------
# Helper to build requisites string with bank details

def _make_requisites(inn: str, kpp: str, rs: str, bank: str, bic: str, addr: str = "") -> str:
    """Return unified requisites string including bank fields."""
    parts: list[str] = [f"–ò–ù–ù {inn}", f"–ö–ü–ü {kpp}"]
    if rs:
        parts.append(f"—Ä/—Å {rs}")
    if bank:
        parts.append(f"–≤ –±–∞–Ω–∫–µ {bank}")
    if bic:
        parts.append(f"–ë–ò–ö {bic}")
    if addr:
        parts.append(f"–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å: {addr}")
    return ", ".join(parts)

# --------------------------------------------------------------------------
# Helper to get int from a string like "200 000 —Ä—É–±"
def _clean_money(val) -> int:
    if isinstance(val, (int, float)):
        return int(val)
    digits = "".join(ch for ch in str(val) if ch.isdigit())
    return int(digits) if digits else 0

# --------------------------------------------------------------------------
# Helper: extract city name from full address
_city_bad_words = {"—É–ª", "—É–ª–∏—Ü–∞", "–¥", "–¥–æ–º", "house", "street"}

def _city_from(addr: str) -> str:
    """
    Try to extract city component from free‚Äëform address.
    ‚Ä¢ Takes substring before first comma / em‚Äëdash / hyphen
    ‚Ä¢ Drops common words like ¬´—É–ª.¬ª, ¬´–¥.¬ª
    ‚Ä¢ Returns first non‚Äëempty word ‚â• 2 chars
    """
    if not addr:
        return ""
    # split on first comma / long dash / hyphen
    import re as _re
    cut = _re.split(r"[,‚Äî\-]", addr, maxsplit=1)[0].strip()
    # remove bad prefixes
    for bad in _city_bad_words:
        if cut.lower().startswith(bad):
            cut = cut[len(bad):].strip()
    # first word that looks like a name
    parts = cut.split()
    for p in parts:
        if len(p) >= 2 and p.lower() not in _city_bad_words:
            return p.strip()
    return ""

# Backend URL configuration
try:
    from modules.settings import SERVER_URL
except ModuleNotFoundError:
    # default to actual backend
    SERVER_URL = "http://147.45.232.245:8000"


# --------------------------------------------------------------------------
# Lazy helper to show main menu without circular import
async def _safe_send_main_menu(bot, chat_id: int, role: str | None = None):
    """
    Call `send_main_menu` from the root telegram_bot module without creating an
    import cycle during module load.  Falls back to a simple message if the
    function is unavailable (e.g. renamed).
    """
    try:
        # resolve only at runtime
        from telegram_bot import send_main_menu as _real_send_main_menu  # type: ignore
        await _real_send_main_menu(bot, chat_id, role)
    except Exception:
        await bot.send_message(
            chat_id=chat_id,
            text="‚úÖ –ó–∞—è–≤–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /menu."
        )
# --------------------------------------------------------------------------

# --- Entry point: publish form intro ---
async def publish_form_intro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # üëâ —Å–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –Ω–µ —Ç—è–Ω—É—Ç—å —Å—Ç–∞—Ä—ã–µ loads/unloads
    context.user_data["new_order"] = {}

    await update.message.reply_text(
        "üìù *–®–∞–≥¬†1¬†/¬†11*\n"
        "–°–∫–æ–ª—å–∫–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–µ—Ä–µ–≤–µ–∑—Ç–∏? (—á–∏—Å–ª–æ–º):",
        parse_mode="Markdown",
        reply_markup=BACK_KB
    )
    return PUB_CAR_COUNT

PUB_CAR_COUNT, PUB_CAR_MODELS, PUB_VINS, \
PUB_L_ADDR, PUB_L_DATE, PUB_L_CONTACT, PUB_L_MORE, \
PUB_U_ADDR, PUB_U_DATE, PUB_U_CONTACT, PUB_U_MORE, \
PUB_BUDGET, PUB_PAY, PUB_PAY_TERMS, PUB_INN, PUB_COMPANY_CONFIRM, \
PUB_COMPANY_NAME, PUB_COMPANY_KPP, PUB_COMPANY_ADDRESS, PUB_COMPANY_ACCOUNT, PUB_COMPANY_BANK, PUB_COMPANY_BIC, \
PUB_DIR, PUB_CONFIRM = range(24)
async def pub_car_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–∞—Ä–∫–∏.
    """
    text = update.message.text.strip()
    try:
        count = int(text)
    except ValueError:
        await update.message.reply_text(
            "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (—Ü–∏—Ñ—Ä–∞–º–∏):",
            reply_markup=BACK_KB
        )
        return PUB_CAR_COUNT

    context.user_data["new_order"]["car_count"] = count
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    await update.message.reply_text(
        "üìù *–®–∞–≥¬†2¬†/¬†11*\n"
        "–ö–∞–∫–∏—Ö –º–∞—Ä–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏? (–Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞/–º–æ–¥–µ–ª–∏):",
        parse_mode="Markdown",
        reply_markup=BACK_KB
    )
    return PUB_CAR_MODELS

# --- Legacy compatibility aliases (used in some back handlers) ---
PUB_ADDRS = PUB_L_ADDR
PUB_DATE  = PUB_L_DATE

# --- Back button keyboard ---
BACK_LABEL = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
BACK_KB = ReplyKeyboardMarkup([[BACK_LABEL]], resize_keyboard=True)

# -------- MULTI‚ÄëPOINT wizard helpers --------
def _init_order_lists(ctx):
    ctx.user_data.setdefault("new_order", {}).setdefault("loads", [])
    ctx.user_data["new_order"].setdefault("unloads", [])

async def _ask_load_addr(update, ctx):
    _init_order_lists(ctx)
    await update.message.reply_text(
        f"üìù *–ü–æ–≥—Ä—É–∑–∫–∞¬†#{len(ctx.user_data['new_order']['loads'])+1}*\n"
        "–¢–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–≥—Ä—É–∑–∫–∏ (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –Ω–æ–º–µ—Ä –¥–æ–º–∞):",
        parse_mode="Markdown",
        reply_markup=BACK_KB
    )
    return PUB_L_ADDR

async def pub_cargo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    context.user_data["new_order"]["car_models"] = update.message.text.strip()
    # --- —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É VIN‚Äë–∫–æ–¥–æ–≤ (—à–∞–≥ 2 –∏–∑ 11) ---
    await update.message.reply_text(
        "üìù *–®–∞–≥¬†2¬†/¬†11*\n"
        "VIN‚Äë–∫–æ–¥—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, *–µ—Å–ª–∏ VIN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª*):",
        parse_mode="Markdown",
        reply_markup=BACK_KB
    )
    return PUB_VINS

async def pub_vins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–®–∞–≥ 3: VIN‚Äë–∫–æ–¥—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)."""
    vins_raw = update.message.text.strip()
    if vins_raw.lower() in {"–Ω–µ—Ç", "-", "‚Äî"}:
        vin_list = []
    else:
        vin_list = [v.strip() for v in re.split(r"[;,\\s]+", vins_raw) if v.strip()]
    context.user_data["new_order"]["vin_list"] = vin_list

    await _ask_load_addr(update, context)
    return PUB_L_ADDR

# --- LOAD steps ---
async def pub_load_addr(update, ctx):
    _init_order_lists(ctx)
    ctx.user_data.setdefault("cur_load", {})["place"] = update.message.text.strip()
    await update.message.reply_text("–î–∞—Ç–∞ –ø–æ–≥—Ä—É–∑–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):",
                                    reply_markup=BACK_KB)
    return PUB_L_DATE

async def pub_load_date(update, ctx):
    from datetime import datetime, date

    date_str = update.message.text.strip()
    try:
        load_dt = datetime.strptime(date_str, "%d.%m.%Y").date()
    except ValueError:
        await update.message.reply_text(
            "‚ùóÔ∏è –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –î–î.–ú–ú.–ì–ì–ì–ì. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
            reply_markup=BACK_KB
        )
        return PUB_L_DATE

    if load_dt < date.today():
        await update.message.reply_text(
            "‚ùóÔ∏è –î–∞—Ç–∞ –ø–æ–≥—Ä—É–∑–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è. "
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì):",
            reply_markup=BACK_KB
        )
        return PUB_L_DATE

    ctx.user_data["cur_load"]["date"] = date_str
    await update.message.reply_text("–ö–æ–Ω—Ç–∞–∫—Ç –Ω–∞ –ø–æ–≥—Ä—É–∑–∫–µ (–ò–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω) "
                                    "–∏–ª–∏ ¬´–Ω–µ—Ç¬ª:",
                                    reply_markup=BACK_KB)
    return PUB_L_CONTACT

async def pub_load_contact(update, ctx):
    ctx.user_data["cur_load"]["contact"] = _clean_optional(update.message.text)
    # attach VIN list (= all by default)
    ctx.user_data["cur_load"]["vins"] = ctx.user_data["new_order"].get("vin_list", [])
    ctx.user_data["new_order"]["loads"].append(ctx.user_data.pop("cur_load"))
    await update.message.reply_text("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–æ—á–∫—É –ø–æ–≥—Ä—É–∑–∫–∏? (–¥–∞/–Ω–µ—Ç)",
                                    reply_markup=BACK_KB)
    return PUB_L_MORE

async def pub_load_more(update, ctx):
    if update.message.text.strip().lower().startswith("–¥"):
        return await _ask_load_addr(update, ctx)
    # else -> move to first unload
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å —Ç–æ—á–∫–∏ *–≤—ã–≥—Ä—É–∑–∫–∏*.\n"
        "–ê–¥—Ä–µ—Å –≤—ã–≥—Ä—É–∑–∫–∏ #1 (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º), –Ω–∞–ø—Ä–∏–º–µ—Ä ¬´–ö–∞–∑–∞–Ω—å, —É–ª. –¢—É–∫–∞—è 5¬ª:",
        parse_mode="Markdown",
        reply_markup=BACK_KB
    )
    return PUB_U_ADDR

async def pub_unload_addr(update, ctx):
    _init_order_lists(ctx)
    ctx.user_data.setdefault("cur_unload", {})["place"] = update.message.text.strip()
    await update.message.reply_text("–î–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):",
                                    reply_markup=BACK_KB)
    return PUB_U_DATE

async def pub_unload_date(update, ctx):
    from datetime import datetime, date

    unload_date_str = update.message.text.strip()
    try:
        unload_dt = datetime.strptime(unload_date_str, "%d.%m.%Y").date()
    except ValueError:
        await update.message.reply_text(
            "‚ùóÔ∏è –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –î–î.–ú–ú.–ì–ì–ì–ì. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
            reply_markup=BACK_KB
        )
        return PUB_U_DATE

    if unload_dt < date.today():
        await update.message.reply_text(
            "‚ùóÔ∏è –î–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è. "
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤—ã–≥—Ä—É–∑–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):",
            reply_markup=BACK_KB
        )
        return PUB_U_DATE

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–≥—Ä—É–∑–∫–∞ –Ω–µ —Ä–∞–Ω—å—à–µ –ø–æ–≥—Ä—É–∑–∫–∏
    try:
        load_date_str = ctx.user_data["new_order"]["loads"][-1]["date"]
        load_dt = datetime.strptime(load_date_str, "%d.%m.%Y").date()
        if unload_dt < load_dt:
            await update.message.reply_text(
                "‚ùóÔ∏è –î–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –ø–æ–≥—Ä—É–∑–∫–∏. "
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤—ã–≥—Ä—É–∑–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):",
                reply_markup=BACK_KB
            )
            return PUB_U_DATE
    except Exception:
        pass

    ctx.user_data["cur_unload"]["date"] = unload_date_str
    await update.message.reply_text("–ö–æ–Ω—Ç–∞–∫—Ç –Ω–∞ –≤—ã–≥—Ä—É–∑–∫–µ (–ò–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω) –∏–ª–∏ ¬´–Ω–µ—Ç¬ª:",
                                    reply_markup=BACK_KB)
    return PUB_U_CONTACT

async def pub_unload_contact(update, ctx):
    ctx.user_data["cur_unload"]["contact"] = _clean_optional(update.message.text)
    ctx.user_data["cur_unload"]["vins"] = ctx.user_data["new_order"].get("vin_list", [])
    ctx.user_data["new_order"]["unloads"].append(ctx.user_data.pop("cur_unload"))
    await update.message.reply_text("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–æ—á–∫—É –≤—ã–≥—Ä—É–∑–∫–∏? (–¥–∞/–Ω–µ—Ç)",
                                    reply_markup=BACK_KB)
    return PUB_U_MORE

async def pub_unload_more(update, ctx):
    if update.message.text.strip().lower().startswith("–¥"):
        await update.message.reply_text("–ê–¥—Ä–µ—Å –≤—ã–≥—Ä—É–∑–∫–∏:",
                                        reply_markup=BACK_KB)
        return PUB_U_ADDR
    # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞–≤–∫–µ
    await update.message.reply_text(
        "üìù *–°—Ç–∞–≤–∫–∞*\n"
        "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä _120‚ÄØ000 —Ä—É–±_",
        parse_mode="Markdown",
        reply_markup=BACK_KB
    )
    return PUB_BUDGET

async def pub_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["new_order"]["budget"] = update.message.text.strip()

    kb_vat = InlineKeyboardMarkup([
        [InlineKeyboardButton("–° –ù–î–°",  callback_data="pay_vat"),
         InlineKeyboardButton("–ë–µ–∑ –ù–î–°", callback_data="pay_novat")]
    ])
    await update.message.reply_text(
        "üìù *–®–∞–≥ 7 / 11*\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã:",
        parse_mode="Markdown",
        reply_markup=kb_vat
    )
    return PUB_PAY

async def pub_pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["new_order"]["pay_terms"] = update.message.text.strip()
    await update.message.reply_text(
        "üìù *–®–∞–≥¬†8¬†/¬†11*\n"
        "–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏‚Äë–∑–∞–∫–∞–∑—á–∏–∫–∞:",
        parse_mode="Markdown",
        reply_markup=BACK_KB
    )
    return PUB_INN

# --- Handler for payment terms entry step in publishing wizard ---
async def pub_pay_terms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Saves entered payment terms and moves to INN step.
    """
    text_raw = update.message.text.strip()
    context.user_data["new_order"]["pay_terms"] = text_raw

    # determine payment_type from text
    if "–Ω–∞–ª–∏—á" in text_raw.lower():
        context.user_data["new_order"]["payment_type"] = "cash"
    else:
        # if not already set by buttons, default to noncash
        context.user_data["new_order"].setdefault("payment_type", "noncash")

    # Ask for INN
    await update.message.reply_text(
        "üìù *–®–∞–≥¬†9¬†/¬†11*\n"
        "–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏‚Äë–∑–∞–∫–∞–∑—á–∏–∫–∞:",
        parse_mode="Markdown",
        reply_markup=BACK_KB
    )
    return PUB_INN

# ---------- Handler for VAT buttons ("pay_vat", "pay_novat") ----------
async def pub_pay_choice(update: Update, ctx):
    """
    Callback handler for inline buttons ¬´–° –ù–î–°¬ª / ¬´–ë–µ–∑ –ù–î–°¬ª.
    Saves only VAT flag *and* sets default `payment_type="noncash"`.
    Real text of payment terms –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥—ë—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.
    """
    q = update.callback_query
    await q.answer()

    choice = q.data  # "pay_vat" or "pay_novat"
    o = ctx.user_data.setdefault("new_order", {})

    # --- set VAT flag ---
    if choice == "pay_vat":
        o["vat"] = True
    elif choice == "pay_novat":
        o["vat"] = False
    else:
        o["vat"] = True   # fallback: treat as "—Å –ù–î–°"

    # –í—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ = –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç,
    # —Ä–µ–∞–ª—å–Ω–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ (–Ω–∞–ª/–±–µ–∑–Ω–∞–ª) –±—É–¥–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.
    o["payment_type"] = "noncash"

    # prompt next step (user enters free‚Äëform payment terms)
    await q.edit_message_text("–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏–Ω—è—Ç–∞.")

    vat_label = "–° –ù–î–°" if o["vat"] else "–ë–µ–∑ –ù–î–°"
    prompt_text = (
        "üìù *–®–∞–≥¬†8¬†/¬†11*\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{vat_label}*.\n"
        "–í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã (–ø—Ä–∏–º–µ—Ä: *100% –±–µ–∑–Ω–∞–ª, 3 –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –¥–Ω—è*):"
    )
    await ctx.bot.send_message(
        chat_id=q.from_user.id,
        text=prompt_text,
        parse_mode="Markdown",
        reply_markup=BACK_KB
    )
    return PUB_PAY_TERMS

async def pub_inn(update: Update, ctx):
    import re
    # 1) –û—Å—Ç–∞–≤–ª—è–µ–º –∏–∑ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    raw_digits = re.sub(r"\D", "", update.message.text)
    # 2) –ï—Å–ª–∏ —Ä–æ–≤–Ω–æ 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ ¬´–≤–∞–ª–∏–¥–Ω—ã–º –ò–ù–ù¬ª
    if len(raw_digits) in (10, 12):
        inn = raw_digits
    else:
        # –∏–Ω–∞—á–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ, —á—Ç–æ –µ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8 –∏–ª–∏ 9 —Ü–∏—Ñ—Ä)
        inn = raw_digits

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–¥ –¥–≤—É–º—è –∫–ª—é—á–∞–º–∏, —á—Ç–æ–±—ã –¥–∞–ª–µ–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –ª–æ–≥–∏–∫—É
    ctx.user_data["new_order"]["inn"] = inn
    ctx.user_data["new_order"]["cust_inn"] = inn

    # DEBUG: –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è
    print(f"[DEBUG pub_inn] raw input: '{update.message.text}' ‚Üí digits: '{raw_digits}', using INN='{inn}'")

    company = await _get_company(inn)
    print(f"[DEBUG pub_inn] _get_company({inn}) ‚Üí {company if company else '<–Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π>'}")
    if company:
        ctx.user_data["new_order"].update({
            "cust_company_name": company.get("name", ""),
            "cust_kpp":          company.get("kpp", ""),
            "cust_address":      company.get("address", ""),
            "cust_account":      company.get("bank_rs", ""),
            "cust_bank_name":    company.get("bank_name", ""),
            "cust_bic":          company.get("bank_bic", ""),
            "cust_requisites":   format_company_requisites(company),
            "cust_director":     company.get("director", ""),
            "cust_account":      company.get("bank_rs", ""),
            "cust_bank_name":    company.get("bank_name", ""),
            "cust_bic":          company.get("bank_bic", ""),
        })
        # Clean and force address from company (for saved companies)
        if company.get("address"):
            ctx.user_data["new_order"]["cust_address"] = company.get("address", "")
        n = ctx.user_data["new_order"]
        n["cust_requisites"] = _make_requisites(
            n.get("cust_inn", n.get("inn", "")),
            n.get("cust_kpp", ""),
            n.get("cust_account", ""),
            n.get("cust_bank_name", ""),
            n.get("cust_bic", ""),
            n.get("cust_address", "")
        )

        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–∞", callback_data="cmp_yes"),
             InlineKeyboardButton("‚úèÔ∏è –ù–µ—Ç", callback_data="cmp_no")]
        ])
        await update.message.reply_text(
            f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è ¬´{company['name']}¬ª –Ω–∞–π–¥–µ–Ω–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã?",
            reply_markup=kb
        )
        return PUB_COMPANY_CONFIRM

    await update.message.reply_text(
        "üìù –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏-–∑–∞–∫–∞–∑—á–∏–∫–∞:",
        reply_markup=BACK_KB
    )
    return PUB_COMPANY_NAME

# ---- New handlers for step-by-step company data entry ----
async def pub_company_name(update: Update, ctx):
    ctx.user_data["new_order"]["cust_company_name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ö–ü–ü:")
    return PUB_COMPANY_KPP

async def pub_company_kpp(update: Update, ctx):
    ctx.user_data["new_order"]["cust_kpp"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å:")
    return PUB_COMPANY_ADDRESS

async def pub_company_address(update: Update, ctx):
    ctx.user_data["new_order"]["cust_address"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç:")
    return PUB_COMPANY_ACCOUNT

async def pub_company_account(update: Update, ctx):
    import re
    clean_rs = re.sub(r"\D", "", update.message.text)
    if len(clean_rs) < 15 or len(clean_rs) > 26:
        await update.message.reply_text(
            "–†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 15‚Äì26 —Ü–∏—Ñ—Ä. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:",
            reply_markup=BACK_KB
        )
        return PUB_COMPANY_ACCOUNT

    ctx.user_data["new_order"]["cust_account"] = clean_rs
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:")
    return PUB_COMPANY_BANK

async def pub_company_bank(update: Update, ctx):
    ctx.user_data["new_order"]["cust_bank_name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ë–ò–ö:")
    return PUB_COMPANY_BIC

async def pub_company_bic(update: Update, ctx):
    import re
    clean_bic = re.sub(r"\D", "", update.message.text)
    if len(clean_bic) not in (8, 9):
        await update.message.reply_text(
            "–ë–ò–ö –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 8 –∏–ª–∏ 9 —Ü–∏—Ñ—Ä. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:",
            reply_markup=BACK_KB
        )
        return PUB_COMPANY_BIC

    ctx.user_data["new_order"]["cust_bic"] = clean_bic
    data = ctx.user_data["new_order"]
    data["cust_requisites"] = _make_requisites(
        data.get("inn", ""),
        data.get("cust_kpp", ""),
        data.get("cust_account", ""),
        data.get("cust_bank_name", ""),
        clean_bic,
        data.get("cust_address", "")
    )
    return await pub_company_finish(update, ctx)

async def pub_company_finish(update: Update, ctx):
    data = ctx.user_data["new_order"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ–º–ø–∞–Ω–∏–∏ —Å –§–ò–û –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –æ–Ω–æ —É–∂–µ –µ—Å—Ç—å)
    new_company = {
        "inn": data.get("inn", ""),
        "name": data.get("cust_company_name", ""),
        "kpp": data.get("cust_kpp", ""),
        "address": data.get("cust_address", ""),
        "bank_rs":   data.get("cust_account", ""),
        "bank_name": data.get("cust_bank_name", ""),
        "bank_bic":  data.get("cust_bic", ""),
        "director":  data.get("cust_director", ""),  # –¥–∏—Ä–µ–∫—Ç–æ—Ä —É–∂–µ –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º ‚Äî —ç—Ç–æ –æ–∫
    }

    # –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç, –≤–∫–ª—é—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ (–µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å)
    await _save_company(new_company)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É requisites –¥–ª—è –∑–∞–∫–∞–∑–∞ (–µ—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä –µ—â–µ –Ω–µ –≤–≤–µ–¥—ë–Ω ‚Äî –æ–Ω–∞ –≤—Å—ë —Ä–∞–≤–Ω–æ –±—É–¥–µ—Ç –≤–∞–ª–∏–¥–Ω–∞)
    data["cust_requisites"] = _make_requisites(
        new_company["inn"],
        new_company["kpp"],
        new_company["bank_rs"],
        new_company["bank_name"],
        new_company["bank_bic"],
        new_company["address"]
    )

    await update.message.reply_text(
        "‚úÖ –ö–æ–º–ø–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n"
        "üìù *–®–∞–≥¬†10¬†/¬†11*\n"
        "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏‚Äë–∑–∞–∫–∞–∑—á–∏–∫–∞:",
        parse_mode="Markdown",
        reply_markup=BACK_KB
    )
    return PUB_DIR
# ---------- confirm company from cache ----------
async def pub_confirm_company(update: Update, ctx):
    q = update.callback_query
    await q.answer()

    # '–î–∞' ‚Äî —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è
    if q.data == "cmp_yes":
        n = ctx.user_data["new_order"]
        company = None
        if n.get("inn"):
            company = await _get_company(n.get("inn"))
        # Ensure cust_address is set from company if available, then build requisites
        if not n.get("cust_address") and company and company.get("address"):
            n["cust_address"] = company.get("address", "")
        # --- ensure we pick director from the saved company object ---
        if company:
            director_raw = (company.get("director") or "").strip()
            # overwrite any garbage (e.g., previous bot prompt) in the wizard data
            n["cust_director"] = director_raw
            n["cust_sign_name"] = director_raw
            # optional alias for templates that expect a different key
            n["customer_director"] = director_raw
        n["cust_requisites"] = _make_requisites(
            n.get("cust_inn", n.get("inn", "")),
            n.get("cust_kpp", ""),
            n.get("cust_account", ""),
            n.get("cust_bank_name", ""),
            n.get("cust_bic", ""),
            n.get("cust_address", "")
        )
        n["cust_sign_name"] = n.get("cust_director", "")
        # –µ—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω ‚Äî —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é (–±–µ–∑ –ª–∏—à–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞ pub_dir)
        if n.get("cust_director"):
            prev = (
                f"üöö *–ü—Ä–µ–≤—å—é*\n"
                f"–ö–æ–º–ø–∞–Ω–∏—è‚Äë–∑–∞–∫–∞–∑—á–∏–∫: {n.get('cust_company_name','‚Äî')}\n"
                f"{n.get('cargo','‚Äî')}\n"
                f"{n.get('route','‚Äî')}\n"
                f"VIN: {', '.join(n.get('vin_list', [])) or '‚Äî'}\n"
                f"–ü–æ–≥—Ä—É–∑–∫–∞: {n.get('addresses','‚Äî')}\n"
                f"–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–≥—Ä—É–∑–∫–∞: {n.get('contact_load','‚Äî')}\n"
                f"–ö–æ–Ω—Ç–∞–∫—Ç –≤—ã–≥—Ä—É–∑–∫–∞: {n.get('contact_unload','‚Äî')}\n"
                f"–î–∞—Ç–∞(—ã): {n.get('date','‚Äî')}\n"
                f"–°—Ç–∞–≤–∫–∞: {n.get('budget','‚Äî')}\n"
                f"–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã: {n.get('pay_terms','‚Äî')}\n"
                f"üè¢ –†–µ–∫–≤–∏–∑–∏—Ç—ã:\n{n.get('cust_requisites', '‚Äî')}\n"
                f"üë§ –î–∏—Ä–µ–∫—Ç–æ—Ä: {n.get('cust_director','‚Äî')}\n\n–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å?"
            )
            kb = InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="pub_yes"),
                  InlineKeyboardButton("‚úñÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="pub_cancel")]]
            )
            await q.message.reply_text(prev, parse_mode="Markdown", reply_markup=kb)
            return PUB_CONFIRM
        # –∏–Ω–∞—á–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤—Ä—É—á–Ω—É—é
        await q.edit_message_text(
            "üìù *–®–∞–≥ 10 / 11*\n"
            "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏-–∑–∞–∫–∞–∑—á–∏–∫–∞:",
            parse_mode="Markdown",
            reply_markup=BACK_KB
        )
        return PUB_DIR

    # –æ—á–∏—Å—Ç–∏–º —Ä–∞–Ω–µ–µ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–≤–æ–¥ –∑–∞–Ω–æ–≤–æ
    for k in list(ctx.user_data["new_order"].keys()):
        if k.startswith("cust_"):
            ctx.user_data["new_order"].pop(k, None)
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (reply_text), —Ç.–∫. edit_message_text –Ω–µ–ª—å–∑—è
    await q.message.reply_text(
        "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏-–∑–∞–∫–∞–∑—á–∏–∫–∞:",
        reply_markup=BACK_KB
    )
    return PUB_COMPANY_NAME

# --- Handler for customer director step ---
async def pub_dir(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ------------------- validate director FIO -------------------
    director_input = update.message.text.strip()

    # –¥–æ–ø—É—Å–∫–∞–µ–º —Ä—É—Å—Å–∫–∏–µ –∏–ª–∏ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ñ–∞–º–∏–ª–∏—è + –∏–Ω–∏—Ü–∏–∞–ª—ã "–ò–≤–∞–Ω–æ–≤ –ò.‚ÄØ–ò." –∏–ª–∏ "–ò–≤–∞–Ω–æ–≤ –ò."
    import re
    pattern = r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë][-A-Za-z–ê-–Ø–∞-—è–Å—ë']+\s+[A-Za-z–ê-–Ø–Å]\.(?:\s?[A-Za-z–ê-–Ø–Å]\.)?$"
    if not re.match(pattern, director_input):
        await update.message.reply_text(
            "‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –§–ò–û –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬´–§–∞–º–∏–ª–∏—è –ò.‚ÄØ–ò.¬ª (–∏–Ω–∏—Ü–∏–∞–ª—ã —Å —Ç–æ—á–∫–∞–º–∏).",
            reply_markup=BACK_KB
        )
        return PUB_DIR  # –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ

    context.user_data["new_order"]["cust_director"] = director_input
    o = context.user_data["new_order"]
    o["cust_sign_name"] = o["cust_director"]

    print("=== –°–æ—Ö—Ä–∞–Ω—è—é –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é ===")
    for k in ("inn", "cust_inn", "cust_kpp", "cust_company_name", "cust_director", "cust_bank_name", "cust_account", "cust_bic", "cust_address"):
        print(k, "=", o.get(k, ""))
    print("===============================")

    await _save_company({
        "inn": o.get("inn", ""),
        "kpp": o.get("cust_kpp", ""),
        "name": o.get("cust_company_name", ""),
        "director": o.get("cust_director", ""),
        "bank_name": o.get("cust_bank_name", ""),
        "bank_rs": o.get("cust_account", ""),
        "bank_bic": o.get("cust_bic", ""),
        "address": o.get("cust_address", "")
    })
    # –¥–∞–ª—å—à–µ –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥...
    prev = (f"üöö *–ü—Ä–µ–≤—å—é*\n"
            f"–ö–æ–º–ø–∞–Ω–∏—è-–∑–∞–∫–∞–∑—á–∏–∫: {o.get('cust_company_name','‚Äî')}\n"
            f"{o['cargo']}\n"
            f"{o.get('route', '‚Äî')}\n"
            f"VIN: {', '.join(o.get('vin_list', [])) or '‚Äî'}\n"
            f"–ü–æ–≥—Ä—É–∑–∫–∞: {o.get('addresses','‚Äî')}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–≥—Ä—É–∑–∫–∞: {o.get('contact_load','‚Äî')}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç –≤—ã–≥—Ä—É–∑–∫–∞: {o.get('contact_unload','‚Äî')}\n"
            f"–î–∞—Ç–∞(—ã): {o.get('date','‚Äî')}\n"
            f"–°—Ç–∞–≤–∫–∞: {o['budget']}\n"
            f"–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã: {'—Å –ù–î–°' if o.get('vat') else '–±–µ–∑ –ù–î–°'}; {o.get('pay_terms','')}\n"
            f"üè¢ –†–µ–∫–≤–∏–∑–∏—Ç—ã:\n{o.get('cust_requisites', '‚Äî')}\n"
            f"üë§ –î–∏—Ä–µ–∫—Ç–æ—Ä: {o.get('cust_director','‚Äî')}\n\n–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å?")
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="pub_yes"),
          InlineKeyboardButton("‚úñÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="pub_cancel")]]
    )
    await update.message.reply_text(prev, parse_mode="Markdown", reply_markup=kb)
    return PUB_CONFIRM

async def pub_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "pub_cancel":
        await q.edit_message_text("üö´ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        # –≤–µ—Ä–Ω—É—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é
        try:
            prof = requests.get(f"{SERVER_URL}/agent/{q.from_user.id}", timeout=4).json()
            role = prof.get("agent_type")
        except Exception:
            role = None
        await _safe_send_main_menu(context.bot, q.from_user.id, role)
        return ConversationHandler.END

    o = context.user_data["new_order"]
    import re
    # ---------- build structured fields ----------
    vin_list = o.get("vin_list", [])
    loads   = o.get("loads", [])
    unloads = o.get("unloads", [])
    # --- ensure both loads and unloads are present ---
    if not loads or not unloads:
        await q.edit_message_text(
            "‚ùóÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É —Ç–æ—á–∫—É –ø–æ–≥—Ä—É–∑–∫–∏ –ò –æ–¥–Ω—É —Ç–æ—á–∫—É –≤—ã–≥—Ä—É–∑–∫–∏.\n"
            "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.",
            parse_mode="Markdown"
        )
        return ConversationHandler.END

    # --- build multi-point loads and unloads summary ---
    load_lines = [
        f"{i+1}. {item['place']} ({item['date']})"
        for i, item in enumerate(loads)
    ]
    text_loads = "–ü–æ–≥—Ä—É–∑–∫–∞:\n" + "\n".join(load_lines) if loads else ""

    unload_lines = [
        f"{i+1}. {item['place']} ({item['date']})"
        for i, item in enumerate(unloads)
    ]
    text_unloads = "–í—ã–≥—Ä—É–∑–∫–∞:\n" + "\n".join(unload_lines) if unloads else ""

    # --- build route using robust _city_from helper ---
    origin = _city_from(loads[0].get("place", "")) if loads else ""
    dest   = _city_from(unloads[0].get("place", "")) if unloads else ""

    route = f"{origin} ‚Äî {dest}" if origin and dest else origin or dest

    date_str = ""
    if loads and unloads:
        date_str = f"{loads[0].get('date', '')} ‚Äì {unloads[0].get('date', '')}"
    elif loads:
        date_str = loads[0].get('date', '')
    elif unloads:
        date_str = unloads[0].get('date', '')

    # --- build a structured message with clearly marked loads and unloads ---
    sections = []
    if loads:
        sections.append("üìç –ü—É–Ω–∫—Ç—ã –ø–æ–≥—Ä—É–∑–∫–∏:")
        for i, item in enumerate(loads, start=1):
            sections.append(f"  {i}. {item['place']} ({item['date']})")
        sections.append("")

    if unloads:
        sections.append("üìç –ü—É–Ω–∫—Ç—ã –≤—ã–≥—Ä—É–∑–∫–∏:")
        for i, item in enumerate(unloads, start=1):
            sections.append(f"  {i}. {item['place']} ({item['date']})")
        sections.append("")

    cargo_text = o.get("cargo", "")
    if cargo_text:
        sections.append(f"üöö –ì—Ä—É–∑: {cargo_text}")

    budget_text = o.get("budget", "")
    if budget_text:
        sections.append(f"üíµ –¶–µ–Ω–∞: {budget_text}")

    pay_terms_text = o.get("pay_terms", "")
    if pay_terms_text:
        sections.append(f"üí≥ –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã: {pay_terms_text}")

    msg = "\n".join(sections)

    # ---------- cars list  ---------------------------------
    # –•–æ—Ç–∏–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å brand/model, —á—Ç–æ–±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –î—Ä–∞–π–≤–µ—Ä–∞
    # –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ ¬´N √ó Brand Model¬ª, –¥–∞–∂–µ –µ—Å–ª–∏ –≤–≤–æ–¥ –±—ã–ª –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ.

    cargo_descr = o.get("cargo", "")
    brand = model = ""
    qty = 0

    # 1) –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ¬´‚Ä¶, Lada Granta, 3 –∞–≤—Ç–æ ‚Ä¶¬ª
    m = re.search(r"(?:,|^)\s*([^,]+?)\s*,\s*(\d+)\s+–∞–≤—Ç–æ", cargo_descr, re.I)

    # 2) –ü–æ–ø—ã—Ç–∫–∞ ¬´3 –∞–≤—Ç–æ Haval H3¬ª
    if not m:
        m = re.search(r"(\d+)\s+–∞–≤—Ç–æ\s+(.+)", cargo_descr, re.I)

    if m:
        if m.lastindex == 2:
            # –æ–±–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–∞—é—Ç –¥–≤–µ –≥—Ä—É–ø–ø—ã qty/brand_model
            if m.re.pattern.startswith("(?:,|^"):
                brand_model_raw, qty_str = m.group(1), m.group(2)
            else:
                qty_str, brand_model_raw = m.group(1), m.group(2)
            qty = int(qty_str)
            parts = brand_model_raw.strip().split(maxsplit=1)
            brand = parts[0]
            model = parts[1] if len(parts) > 1 else ""

    # 3) Fallback: –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —à–∞–±–ª–æ–Ω—É, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–∏–≤–Ω–æ.
    if not brand:
        # —É–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞ "–∞–≤—Ç–æ", —Ü–∏—Ñ—Ä—ã, –∑–∞–ø—è—Ç—ã–µ
        tmp = re.sub(r"\b\d+\b|\b–∞–≤—Ç–æ\b|,", " ", cargo_descr, flags=re.I)
        tmp = " ".join(tmp.split())        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
        parts = tmp.split(maxsplit=2)
        if parts:
            brand = parts[0]
            model = " ".join(parts[1:]) if len(parts) > 1 else ""

    # 4) qty –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = len(vin_list) (–µ—Å–ª–∏ –æ–Ω–æ >0 –∏ qty –µ—â—ë –Ω–µ –Ω–∞–π–¥–µ–Ω)
    if not qty and o.get("vin_list"):
        qty = len(o["vin_list"])

    vin_list = o.get("vin_list", [])

    cars: list[dict] = []
    if vin_list:
        # –µ—Å–ª–∏ –µ—Å—Ç—å VIN-—ã, –¥—É–±–ª–∏—Ä—É–µ–º brand/model –≤ –∫–∞–∂–¥—ã–π
        for v in vin_list:
            car: dict = {"vin": v}
            if brand:
                car["brand"] = brand
            if model:
                car["model"] = model
            cars.append(car)
    elif qty:
        # VIN-–æ–≤ –Ω–µ—Ç, –Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cars = [{"brand": brand, "model": model} for _ in range(qty)]
    # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    # --- validate route: must have both origin and dest ---
    if not origin or not dest:
        await q.edit_message_text(
            "‚ùóÔ∏è –ú–∞—Ä—à—Ä—É—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥–æ—Ä–æ–¥–∞ –ø–æ–≥—Ä—É–∑–∫–∏ –∏ –≤—ã–≥—Ä—É–∑–∫–∏.",
            parse_mode="Markdown"
        )
        return ConversationHandler.END
    # ------- Build human‚Äëreadable message BEFORE POST -------
    cars_descr = ""
    if o.get("car_count") and o.get("car_models"):
        cars_descr = f"{o['car_count']}√ó{o['car_models']}".strip()
    elif o.get("cargo"):
        cars_descr = o["cargo"].strip()
    # remove commas so backend doesn't split route on them
    cars_descr = cars_descr.replace(",", " ")

    budget_text = re.sub(",", " ", o.get("budget", "")).strip()
    # Build "–ú–∞—Ä—à—Ä—É—Ç ‚Ä¢ –ì—Ä—É–∑ ‚Äî –¶–µ–Ω–∞"
    msg_parts = [route]
    if cars_descr:
        msg_parts.append(f"‚Ä¢ {cars_descr}")
    if budget_text:
        msg_parts.append(f"‚Äî {budget_text}")
    human_message = " ".join(msg_parts).strip()
    # numeric price for driver lists / push
    final_amt = _clean_money(budget_text)

    r = requests.post(
        f"{SERVER_URL}/add_order",
        json={
            "status": "active",            # <-- –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            "telegram_id": q.from_user.id,
            "message": human_message,
            "cargo": cars_descr,
            "final_amt":  final_amt,
            "cust_company_name": o.get("cust_company_name", ""),
            "cust_kpp":          o.get("cust_kpp", ""),
            "cust_address":      o.get("cust_address", ""),
            "cust_account":      o.get("cust_account", ""),
            "cust_bank_name":    o.get("cust_bank_name", ""),
            "cust_bic":          o.get("cust_bic", ""),
            "cust_requisites":   o.get("cust_requisites", ""),
            "cust_director":     o.get("cust_director", ""),
            "cust_sign_name":    o.get("cust_director", ""),
            "cust_name":         o.get("cust_company_name", ""),   # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ alias
            "vat":        o.get("vat", True),
            "pay_terms":  o.get("pay_terms", ""),
            "cars":     cars,
            "loads":    loads,
            "unloads":  unloads,
        }
    )
    # --- ALWAYS save the latest company with all director/bank fields after successful add_order ---
    await _save_company({
        "inn": o.get("inn", ""),
        "kpp": o.get("cust_kpp", ""),
        "name": o.get("cust_company_name", ""),
        "director": o.get("cust_director", ""),
        "bank_name": o.get("cust_bank_name", ""),
        "bank_rs": o.get("cust_account", ""),
        "bank_bic": o.get("cust_bic", ""),
        "address": o.get("cust_address", "")
    })

    if r.status_code == 200:
        res = r.json()
        # extract numeric order id from message "–í–∞—à –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: N"
        import re as _re
        m_id = _re.search(r"\d+", res.get("message", ""))
        order_id = int(m_id.group(0)) if m_id else 0
        try:
            prof = requests.get(f"{SERVER_URL}/agent/{q.from_user.id}", timeout=4).json()
        except Exception:
            prof = {}
        try:
            add_request_row({
                "id": order_id,
                "date": date_str,
                "navigator": prof.get("name", ""),
                "customer_company": o.get("cust_company_name", ""),
                "route": route,
                "cargo": cars_descr,
                "orig_price": _clean_money(budget_text),
            })
        except Exception as e:
            print("Sheets add_request_row error:", e)
        kb_cancel = InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"nv_cancel_{order_id}")]]
        )
        await q.edit_message_text(
            f"‚úÖ {res['status']}\n{res['message']}",
            reply_markup=kb_cancel
        )
        # –≤–µ—Ä–Ω—É—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é
        try:
            prof = requests.get(f"{SERVER_URL}/agent/{q.from_user.id}", timeout=4).json()
            role = prof.get("agent_type")
        except Exception:
            role = None
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–æ–¥—Ä—è—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –º–∏–Ω–∏-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        try:
            name = prof.get("name", "").split()[0] or "–¥—Ä—É–≥"
        except Exception:
            name = "–¥—Ä—É–≥"
        from telegram_bot import ENCOURAGE
        import random
        msg = (
            f"{random.choice(ENCOURAGE)}\n\n"
            "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è–º!\n"
            "–ú—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –ø–æ–∏—Å–∫ –Ω–∞–¥—ë–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è. "
            "üì≤ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –ø–µ—Ä–µ–≤–æ–∑–∫—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
        )
        await context.bot.send_message(chat_id=q.from_user.id, text=msg)
        # –æ—á–∏—Å—Ç–∏–º –¥–∞–Ω–Ω—ã–µ –≤–∏–∑–∞—Ä–¥–∞, —á—Ç–æ–±—ã –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞—á–∏–Ω–∞–ª–∞—Å—å ¬´—Å –Ω—É–ª—è¬ª
        context.user_data["new_order"] = {}
        await _safe_send_main_menu(context.bot, q.from_user.id, role)
        return ConversationHandler.END
    elif r.status_code == 400 and "–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç" in r.text:
        # backend –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞
        await q.edit_message_text(
            "‚ùóÔ∏è –ú–∞—Ä—à—Ä—É—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–≥—Ä—É–∑–∫–∏ –∏ –≤—ã–≥—Ä—É–∑–∫–∏.\n"
            "–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —à–∞–≥—É –∞–¥—Ä–µ—Å–æ–≤ –∏ —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬´–ì–æ—Ä–æ–¥A ‚Äî –ì–æ—Ä–æ–¥B¬ª.",
            parse_mode="Markdown"
        )
        return ConversationHandler.END
    else:
        await q.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {r.text}")
    return ConversationHandler.END

# ---------- Back handlers for publish wizard ----------
async def back_from_route(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # return to car count question
    await update.message.reply_text(
        "üìù *–®–∞–≥¬†1¬†/¬†11*\n"
        "–°–∫–æ–ª—å–∫–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–µ—Ä–µ–≤–µ–∑—Ç–∏? (—á–∏—Å–ª–æ–º):",
        parse_mode="Markdown",
        reply_markup=BACK_KB
    )
    return PUB_CAR_COUNT

async def back_from_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìù *–®–∞–≥¬†6¬†/¬†11*\n"
        "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ –Ω–∞ –ø–æ–≥—Ä—É–∑–∫–µ/–≤—ã–≥—Ä—É–∑–∫–µ (–∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω):",
        parse_mode="Markdown",
        reply_markup=BACK_KB
    )
    return PUB_U_CONTACT

# --- Handler for going back from pay step in publishing wizard ---
async def back_from_pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìù *–®–∞–≥¬†7¬†/¬†11*\n"
        "–°—Ç–∞–≤–∫–∞?  _120‚ÄØ000¬†—Ä—É–±_",
        parse_mode="Markdown",
        reply_markup=BACK_KB
    )
    return PUB_BUDGET


async def back_from_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìù *–®–∞–≥¬†5¬†/¬†11*\n"
        "–ö–æ–≥–¥–∞ –ø–æ–≥—Ä—É–∑–∫–∞ –∏ –∫–æ–≥–¥–∞ –≤—ã–≥—Ä—É–∑–∫–∞?  (–ø—Ä–∏–º–µ—Ä ¬´12.05 ‚Äì 15.05¬ª)",
        parse_mode="Markdown",
        reply_markup=BACK_KB
    )
    return PUB_DATE

async def back_from_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìù *–®–∞–≥¬†4¬†/¬†11*\n"
        "–¢–æ—á–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–≥—Ä—É–∑–∫–∏ –∏ –≤—ã–≥—Ä—É–∑–∫–∏?\n"
        "_–ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞ 1 ‚Äî –ö–∞–∑–∞–Ω—å, —É–ª. –¢—É–∫–∞—è 5_",
        parse_mode="Markdown",
        reply_markup=BACK_KB
    )
    return PUB_ADDRS

async def back_to_publish_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Return from wizard to publish menu without circular import at module load."""
    from telegram_bot import show_publish_menu as _show_publish_menu   # local import
    await _show_publish_menu(update, context)
    return ConversationHandler.END

 # ---------- Navigator cancels own order ----------
async def nav_cancel_order(update: Update, ctx):
    """
    Callback handler for button  ¬´‚ùå –û—Ç–º–µ–Ω–∏—Ç—å¬ª.
    Sets order status to `cancelled`.
    """
    q = update.callback_query
    await q.answer()
    try:
        order_id = int(q.data.split("_")[2])          # pattern nv_cancel_<id>
    except Exception:
        await q.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∑–∞—è–≤–∫–∏.")
        return

    try:
        requests.patch(
            f"{SERVER_URL}/admin/order/{order_id}/status/cancelled",
            timeout=5
        )
        await q.edit_message_text(f"‚úÖ –ó–∞—è–≤–∫–∞ ‚Ññ{order_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except Exception as e:
        await q.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: {e}")

__all__ = (
    # states
    "PUB_CAR_COUNT", "PUB_CAR_MODELS", "PUB_VINS", "PUB_L_ADDR", "PUB_L_DATE", "PUB_L_CONTACT", "PUB_L_MORE",
    "PUB_U_ADDR", "PUB_U_DATE", "PUB_U_CONTACT", "PUB_U_MORE",
    "PUB_BUDGET", "PUB_PAY", "PUB_INN",
    "PUB_COMPANY_NAME", "PUB_COMPANY_KPP", "PUB_COMPANY_ADDRESS", "PUB_COMPANY_ACCOUNT", "PUB_COMPANY_BANK", "PUB_COMPANY_BIC",
    "PUB_DIR", "PUB_CONFIRM", "PUB_COMPANY_CONFIRM",
    # handlers & helpers
    "_init_order_lists", "_ask_load_addr",
    "pub_car_count", "pub_cargo", "pub_vins", "pub_load_addr", "pub_load_date",
    "pub_load_contact", "pub_load_more", "pub_unload_addr", "pub_unload_date",
    "pub_unload_contact", "pub_unload_more", "pub_budget", "pub_pay",
    "pub_inn", "pub_company_name", "pub_company_kpp", "pub_company_address",
    "pub_company_account", "pub_company_bank", "pub_company_bic", "pub_company_finish",
    "pub_dir", "pub_confirm",
    "back_from_route", "back_from_budget", "back_from_pay",
    "back_from_contacts", "back_from_date", "back_to_publish_menu", "pub_confirm_company",
    "nav_cancel_order",
    # legacy aliases
    "PUB_ADDRS", "PUB_DATE",
    
)