from modules.wizards.close import (
    CLOSE_FIO, CLOSE_PASSPORT, CLOSE_COMPANY_CONFIRM, CLOSE_COMPANY, CLOSE_DIRECTOR,
    CLOSE_TRUCK, CLOSE_TRAILER, CLOSE_INSURANCE, CLOSE_LICENSE,
    CLOSE_INN, CLOSE_KPP, BANK_NAME, BANK_RS, BANK_KS, BANK_BIC, CLOSE_PAY,
    CLOSE_ADDRESS,
    start_close_callback,
    close_get_fio, close_get_passport, close_get_company,
    close_confirm_company,
    close_get_director, close_get_truck, close_get_trailer,
    close_get_insurance, close_get_license, close_get_inn,
    close_get_kpp, close_get_bank_name, close_get_bank_rs,
    close_get_bank_ks, close_get_bank_bic, close_pay_choice, close_get_address
)

import random

GREETINGS = [
    "–ü—Ä–∏–≤–µ—Ç, {name}! –û—Ç–ª–∏—á–Ω–æ–≥–æ —Ç–µ–±–µ –¥–Ω—è üöÄ",
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}! –í—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è!",
    "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}! –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏.",
    "–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å, {name}! –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –∑–∞–¥–∞—á–∞–º?",
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å—ë—Ç —Ç–æ–ª—å–∫–æ —É–¥–∞—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏!",
]

ENCOURAGE = [
    "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ üí™",
    "–ú–æ–ª–æ–¥–µ—Ü! –ï—â—ë –æ–¥–∏–Ω —à–∞–≥ –∫ —É—Å–ø–µ—Ö—É üöö",
    "–ö–∞–∂–¥–∞—è –∑–∞—è–≤–∫–∞ ‚Äî —ç—Ç–æ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä—ë–¥!",
    "–í—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç–µ —Å–≤–æ–µ–π —ç–Ω–µ—Ä–≥–∏–µ–π. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
    "–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî —ç—Ç–æ –≤—Å–µ–≥–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ö–æ—Ä–æ—à–∏—Ö —Ä–µ—à–µ–Ω–∏–π.",
]

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from types import SimpleNamespace
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)
from pprint import pprint
import re
from telegram.constants import ChatAction
from typing import List, Dict
import requests
import aiohttp
import asyncio
import io
from modules.helpers import _http_get_json
from modules.helpers import _clean_optional, _norm_inn, fmt_money, BACK_PATTERN
from modules.wizards.publish import _clean_money
from sheets import update_request
from modules.wizards.publish import (
    # states
    PUB_CAR_COUNT, PUB_CAR_MODELS, PUB_VINS, PUB_L_ADDR, PUB_L_DATE, PUB_L_CONTACT, PUB_L_MORE,
    PUB_U_ADDR, PUB_U_DATE, PUB_U_CONTACT, PUB_U_MORE,
    PUB_BUDGET, PUB_PAY, PUB_PAY_TERMS, PUB_INN,
    PUB_COMPANY_NAME, PUB_COMPANY_KPP, PUB_COMPANY_ADDRESS, PUB_COMPANY_ACCOUNT, PUB_COMPANY_BANK, PUB_COMPANY_BIC,
    PUB_DIR, PUB_CONFIRM, PUB_COMPANY_CONFIRM,
    # handlers
    _init_order_lists, _ask_load_addr,
    pub_car_count,
    pub_cargo, pub_vins, pub_load_addr, pub_load_date,
    pub_load_contact, pub_load_more, pub_unload_addr, pub_unload_date,
    pub_unload_contact, pub_unload_more, pub_budget, pub_pay,
    pub_pay_terms,
    pub_inn, pub_company_name, pub_company_kpp, pub_company_address, pub_company_account, pub_company_bank, pub_company_bic,
    pub_dir, pub_confirm,
    back_from_route, back_from_budget, back_from_pay,
    back_from_contacts, back_from_date, back_to_publish_menu, pub_confirm_company,
    nav_cancel_order, pub_pay_choice
)


# --- Main menu publish label ---
TASKS_TEXT = "üì¶ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏"
# --- Admin panel labels ---
ADMIN_PANEL_LABEL    = "üõ† –ê–¥–º–∏–Ω‚Äë–ø–∞–Ω–µ–ª—å"
ADMIN_CURRENT_LABEL  = "üì¶ –¢–µ–∫—É—â–∏–µ"
ADMIN_ARCHIVE_LABEL  = "üìö –ê—Ä—Ö–∏–≤"
TOKEN_MENU_LABEL     = "üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏"
TOKEN_CUST_LABEL     = "üß≠ Token –¥–ª—è –ù–∞–≤–∏–≥–∞—Ç–æ—Ä–∞"
TOKEN_EXEC_LABEL     = "üöö Token –¥–ª—è –î—Ä–∞–π–≤–µ—Ä–∞"
# --- Main menu publish label ---


PUBLISH_LABEL = "‚úèÔ∏è –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É"

# --- Bonus calculator ---
BONUS_CALC_LABEL  = "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±–æ–Ω—É—Å–∞"
CUST_BONUS_RATE   = 0.05   # 5‚ÄØ% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏
EXEC_BONUS_RATE   = 0.03   # 3‚ÄØ% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏

# --- Registration wizard state constants ---
# –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ ConversationHandler –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞.
# –î–∏–∞–ø–∞–∑–æ–Ω 400‚Äë403 –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –¥—Ä—É–≥–∏–º–∏ state‚Äëid, –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∏–∂–µ.
NAME, PHONE, ROLE, ASK_TOKEN = range(400, 404)

# --- Token conversation states ---
TOK_MENU, TOK_DONE = range(100, 102)

BACK_LABEL = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"

# --- Filter label and buttons ---
FILTER_LABEL = "üîé –§–∏–ª—å—Ç—Ä"
FILTER_OFF = "üîé –§–∏–ª—å—Ç—Ä ‚ö™Ô∏è"
FILTER_ON  = "üîé –§–∏–ª—å—Ç—Ä üü¢"
RESET_LABEL = "üîÑ –°–±—Ä–æ—Å"

# --- My Orders / History menu ---
MY_TASKS_LABEL = "üìÑ –ú–æ–∏ –∑–∞—è–≤–∫–∏"
HISTORY_LABEL  = "üìö –ê—Ä—Ö–∏–≤"

STATUS_DOT = {
    "active":      "üü°",
    "confirmed":   "‚úÖ",
    "in_progress": "üîµ",
    "done":        "üü¢",
    "paid":        "üí∞",
}

# how many orders per page in cabinet view

CAB_PAGE_SIZE = 14
ARCH_PAGE_SIZE = 14

# --- Back keyboard helper for wizard steps ---
BACK_KB = ReplyKeyboardMarkup([[BACK_LABEL]], resize_keyboard=True)

# --- Admin settings ---
ADMINS = {6835069941, 7823236991}  # –¥–æ–±–∞–≤–∏–ª–∏ –≤—Ç–æ—Ä–æ–π TG‚ÄëID –∞–¥–º–∏–Ω–∞


# --- Role display names ---
ROLE_LABEL = {
    "–∑–∞–∫–∞–∑—á–∏–∫":    "–ù–∞–≤–∏–≥–∞—Ç–æ—Ä",
    "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å": "–î—Ä–∞–π–≤–µ—Ä",
}
def _role_label(code: str) -> str:
    """Return human‚Äëfriendly role name."""
    return ROLE_LABEL.get(code, code)

# --- Per‚Äërole welcome messages ---
WELCOME_ROLE_MSG = {
    "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å": (
        "üöö *–ü—Ä–∏–≤–µ—Ç, –î—Ä–∞–π–≤–µ—Ä!* \n\n"
        "–¢–µ—Ö–Ω–æ–õ–æ–≥–∏—Å—Ç–∏–∫–∞ —Ä–∞–¥–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞¬†‚Äî –±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫–∏. "
        "–ó–∞ –∫–∞–∂–¥—É—é —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é –ø–æ–µ–∑–¥–∫—É —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å üí∞ *+3‚ÄØ%* –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–π—Å–∞.\n\n"
        "–ü–æ–µ—Ö–∞–ª–∏! üèÅ"
    ),
    "–∑–∞–∫–∞–∑—á–∏–∫": (
        "üß≠ *–ü—Ä–∏–≤–µ—Ç, –ù–∞–≤–∏–≥–∞—Ç–æ—Ä!* \n\n"
        "–¢–µ—Ö–Ω–æ–õ–æ–≥–∏—Å—Ç–∏–∫–∞ —Ä–∞–¥–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞¬†‚Äî –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π. "
        "–ó–∞ –∫–∞–∂–¥—É—é —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç—É—é —Å–¥–µ–ª–∫—É —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å üí∞ *+5‚ÄØ%* –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏.\n\n"
        "–í–º–µ—Å—Ç–µ –ø–æ–∫–æ—Ä–∏–º –ª–æ–≥–∏—Å—Ç–∏–∫—É! üöÄ"
    ),
}

# --- Menu/cabinet constants ---
MENU_CMD = "menu"                # –∫–æ–º–∞–Ω–¥–∞
MENU_LABEL = "üè† –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç"     # —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏

# ID –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞‚Äë—Ö—Ä–∞–Ω–∏–ª–∏—â–∞, –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã
STORAGE_CHANNEL_ID = -1002616739735   # ‚Üê –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ real id, —Ñ–æ—Ä–º–∞—Ç–∞ -100...

# -------- CONFIG ----------
TOKEN = "7626649459:AAFYfJrC31GzZgEKNQUbhf11wbP8dN5mhgU"

# --- Allowed MIME types for signed contracts (.docx / .pdf / .rtf) ---
ALLOWED_MIME = {
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document",  # .docx
    "application/msword",                 # .doc
    "application/pdf",
    "application/rtf",                    # .rtf
    "text/rtf",
}

# --- global application holder for cross‚Äëmodule notifications ---
APP = None

# --- Notification helper for cross-module use ---
async def send_notification_to_executor(tg_id: int, text: str, file_path: str | None = None):
    """
    Sends a message (and optionally a document) to the given Telegram user.

    ‚Ä¢ If file_path is provided ‚Üí first send the document with caption,
      then –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–∏ (–¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–æ–≤).
    ‚Ä¢ Else ‚Äî –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
    """
    if APP is None:
        print("Notify error: bot instance not ready")
        return

    try:
        if file_path:
            # 1) send the document itself
            with open(file_path, "rb") as f:
                await APP.bot.send_document(
                    chat_id=tg_id,
                    document=f,
                    caption=text if text else "üìë –î–æ–∫—É–º–µ–Ω—Ç"
                )
            # 2) follow‚Äëup instruction for contracts
            follow_up = (
                "‚úçÔ∏è –î–æ–≥–æ–≤–æ—Ä —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏."
            )
            await APP.bot.send_message(chat_id=tg_id, text=follow_up)
        else:
            # simple text notification
            await APP.bot.send_message(chat_id=tg_id, text=text or "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    except Exception as e:
        print("Notify error:", e)


# --- Handler for receiving signed contract documents (.docx/.pdf) ---
async def receive_signed_doc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Receives a signed contract (.docx or .pdf) from Navigator/Driver,
    forwards it to the backend `/orders/{id}/signed_document`,
    and informs the user about the result.
    """
    if not update.message or not update.message.document:
        return

    doc = update.message.document
    if doc.mime_type not in ALLOWED_MIME:
        await update.message.reply_text(
            "‚ùóÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx, .pdf –∏–ª–∏ .rtf."
        )
        return

    # Order ID was saved in user_data right after –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞
    order_id = context.user_data.get("closing_order_id")
    if not order_id:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å, –∫ –∫–∞–∫–æ–π –∑–∞—è–≤–∫–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —ç—Ç–æ—Ç —Ñ–∞–π–ª. "
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–∫–∏."
        )
        return

    role = context.user_data.get("role", "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")

    # Download document into memory
    tg_file = await doc.get_file()
    buf = io.BytesIO()
    await tg_file.download(out=buf)
    buf.seek(0)

    try:
        resp = requests.post(
            f"{SERVER_URL}/orders/{order_id}/signed_document",
            params={"role": role, "filename": doc.file_name},
            files={"file": (doc.file_name, buf, doc.mime_type)},
            timeout=15
        )
    except requests.exceptions.RequestException as exc:
        print("signed_document request error:", exc)
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    if resp.status_code != 200:
        await update.message.reply_text(
            f"‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {resp.status_code}"
        )
        return

    resp_data = resp.json() if resp.headers.get("content-type", "").startswith("application/json") else {}
    if resp_data.get("status") == "in_progress":
        await update.message.reply_text(
            "üéâ –û–±–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã. –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ—à–ª–∞ –≤ —Å—Ç–∞—Ç—É—Å ¬´–í —Ä–∞–±–æ—Ç–µ¬ª!"
        )
    else:
        await update.message.reply_text(
            "‚úÖ –í–∞—à –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ñ–¥—ë–º –≤—Ç–æ—Ä—É—é —Å—Ç–æ—Ä–æ–Ω—É."
        )

async def upload_contract_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    order_id = int(query.data.split("_")[2])
    context.user_data["closing_order_id"] = order_id

    await query.message.reply_text(
        "üìë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä (PDF, DOCX –∏–ª–∏ RTF)."
    )



# -------- CONFIG ----------
import os
SERVER_URL = "http://147.45.232.245:8000"  # default actual backend


# --------- Welcome image ----------
WELCOME_FILE_ID = "AgACAgIAAxkBAAIafmghqtnEsHE_Hb3kwynDDIndkjxxAAJy8DEbRyQQSXr4VtiHUh1HAQADAgADeQADNgQ"   # ‚Üê –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π file_id
WELCOME_TEXT = (
    "ü§ñ *–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è CRM‚Äë–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∫–æ–º–ø–∞–Ω–∏–∏ ¬´–¢–µ—Ö–Ω–æ–õ–æ–≥–∏—Å—Ç–∏–∫–∞¬ª*\n"
    "–î–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ù–∞–≤–∏–≥–∞—Ç–æ—Ä–æ–≤ –∏ –î—Ä–∞–π–≤–µ—Ä–æ–≤."
)

# --------- Publish banner ----------
PUBLISH_BANNER_FILE_ID = "AgACAgIAAxkBAAIahWghrEJNmnChOIoumbOu6G4ltTxnAAJw8DEbRyQQSRj5AhmIHc24AQADAgADeAADNgQ"   # ‚Üê put real file_id here
PUBLISH_BANNER_TEXT = (
    "‚úèÔ∏è *–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É*\n"
    "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É, –∏ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –µ—ë –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º."
)

# --------- Cabinet banner ----------
CABINET_BANNER_FILE_ID = "AgACAgIAAxkBAAIaimghrLdLGOgS0GEBQfr0u-ojyr9NAAIq9jEbSMkISZjAvK9eYjJeAQADAgADeQADNgQ"   # ‚Üê replace with real file_id
CABINET_BANNER_TEXT = "üè† *–ú–æ–π¬†–∫–∞–±–∏–Ω–µ—Ç*"

# --------- Bonus calculator banner ----------
BONUS_BANNER_FILE_ID = "AgACAgIAAxkBAAJFhWgze6OaDrUFR067uHA8ZZT8lmAxAAK78TEbaVSYSfBsRDypLVo0AQADAgADeAADNgQ"  # ‚Üê –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π file_id!
BONUS_BANNER_TEXT = (
    "üèÜ *–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±–æ–Ω—É—Å–∞*\n"
    "–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å–≤–æ–π –±–æ–Ω—É—Å –∑–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø—Ä—è–º–æ –∑–¥–µ—Å—å."
)
 

# -------- Main menu keyboard helper ----------
async def send_main_menu(bot, chat_id: int, role: str | None = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ú–µ–Ω—é + –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏."""
    rows: list[list[str]] = [[MENU_LABEL]]

    # --- –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –≤—Å–µ–º ---
    # rows.append([HISTORY_LABEL])  # "–ê—Ä—Ö–∏–≤" –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    rows.append([BONUS_CALC_LABEL])
    rows.append(["üí∞ –ú–æ–π –∫–æ—à–µ–ª—ë–∫"])

    # --- –†–æ–ª–µ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ ---
    if role in ("–∑–∞–∫–∞–∑—á–∏–∫", "admin"):
        # –ù–∞–≤–∏–≥–∞—Ç–æ—Ä –∏ –ê–¥–º–∏–Ω: –º–æ–≥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞—è–≤–∫–∏
        rows.insert(1, [PUBLISH_LABEL])          # ¬´–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å¬ª –ø–æ—Å–ª–µ –º–µ–Ω—é
    else:
        # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏
        rows.insert(1, [TASKS_TEXT])             # ¬´–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏¬ª –ø–æ—Å–ª–µ –º–µ–Ω—é

    # –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –Ω–∏–∂–µ, –Ω–∏—á–µ–≥–æ –º–µ–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
    if chat_id in ADMINS:
        rows.insert(0, [ADMIN_PANEL_LABEL])        # –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π

    kb = ReplyKeyboardMarkup(rows, resize_keyboard=True)
    last = await bot.send_message(
        chat_id=chat_id,
        text="üì≤ –ú–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        reply_markup=kb
    )
    return last

# ----------- Back to main menu -----------
async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∏ –≤—ã–π—Ç–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Å—Ç–µ—Ä–∞/—Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    # Remove last bot message, if any
    last = context.user_data.pop("last_bot_msg", None)
    if last:
        try:
            await last.delete()
        except:
            pass
    # Remove last bot message banner, if any
    banner = context.user_data.pop("last_bot_msg_banner", None)
    if banner:
        try:
            await banner.delete()
        except:
            pass
    # Delete triggering user message (e.g., "‚¨ÖÔ∏è –ù–∞–∑–∞–¥") if present
    if update.message:
        try:
            await update.message.delete()
        except:
            pass
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ (inline-)—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
    if update.callback_query:
        try:
            await update.callback_query.message.delete()
        except:
            pass

    tg_id = update.effective_user.id
    try:
        role = requests.get(f"{SERVER_URL}/agent/{tg_id}", timeout=4).json().get("agent_type")
    except Exception:
        role = context.user_data.get("role")
    last = await send_main_menu(context.bot, tg_id, role)
    context.user_data["last_bot_msg"] = last
    return ConversationHandler.END

# ----------- Cancel helper -----------
async def cancel_wizard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –º–∞—Å—Ç–µ—Ä –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ ¬´–ù–∞–∑–∞–¥¬ª –∏–ª–∏ /cancel –∏–∑ –ª—é–±–æ–≥–æ —à–∞–≥–∞ close/publish.
    """
    # Remove last bot message, if any
    last = context.user_data.pop("last_bot_msg", None)
    if last:
        try:
            await last.delete()
        except:
            pass
    last = await update.message.reply_text("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    context.user_data["last_bot_msg"] = last
    return await back_to_main(update, context)
# ----------- –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–º–µ–Ω—é –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ -----------
async def show_publish_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."""
    # Remove last bot message, if any
    last = context.user_data.pop("last_bot_msg", None)
    if last:
        try:
            await last.delete()
        except:
            pass
    # Also remove wallet banner if present
    banner = context.user_data.pop("last_bot_msg_banner", None)
    if banner:
        try:
            await banner.delete()
        except:
            pass
    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-—Ç—Ä–∏–≥–≥–µ—Ä (¬´‚úèÔ∏è –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É¬ª), —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if update.message and update.message.text:
        try:
            await update.message.delete()
        except:
            pass

    tg_id = update.effective_user.id
    try:
        prof = await _http_get_json(f"{SERVER_URL}/agent/{tg_id}")
        role = prof.get("agent_type")
        if role not in ("–∑–∞–∫–∞–∑—á–∏–∫", "admin"):
            last = await update.message.reply_text("üìå –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –ù–∞–≤–∏–≥–∞—Ç–æ—Ä –∏–ª–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
            context.user_data["last_bot_msg"] = last
            return
    except Exception:
        last = await update.message.reply_text("üìå –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –ù–∞–≤–∏–≥–∞—Ç–æ—Ä –∏–ª–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        context.user_data["last_bot_msg"] = last
        return

    # --- publish banner ---
    try:
        last = await context.bot.send_photo(
            chat_id=tg_id,
            photo=PUBLISH_BANNER_FILE_ID,
            caption=PUBLISH_BANNER_TEXT,
            parse_mode="Markdown"
        )
        context.user_data["last_bot_msg"] = last
    except Exception as e:
        # banner is optional; log and continue
        print("Publish banner error:", e)

    kb = ReplyKeyboardMarkup(
        [["‚ú® –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"],
         [BACK_LABEL]],
        resize_keyboard=True
    )
    last = await update.message.reply_text(
        "–ù–∞–∂–º–∏—Ç–µ ¬´‚ú®¬†–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É¬ª, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É:",
        reply_markup=kb
    )
    context.user_data["last_bot_msg"] = last
# ----------- –ü–æ—è—Å–Ω–µ–Ω–∏—è –∫ —Ä–µ–∂–∏–º–∞–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ -----------
async def publish_text_intro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –±—ã—Å—Ç—Ä–æ–º—É —Å–ø–æ—Å–æ–±—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."""
    await update.message.reply_text(
        "‚úèÔ∏è *–ë—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–±*\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º: –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–∑–∞, –∑–∞—Ç–µ–º –º–∞—Ä—à—Ä—É—Ç –∏ —Å—É–º–º—É.\n"
        "_–ü—Ä–∏–º–µ—Ä_: `3 –ø–∞–ª–ª–µ—Ç—ã –ø–ª–∏—Ç–∫–∏, 2.4‚ÄØ—Ç, –ú–æ—Å–∫–≤–∞ ‚Äî –ö–∞–∑–∞–Ω—å, 120‚ÄØ000 —Ä—É–±`",
        parse_mode="Markdown"
    )

async def publish_form_intro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç –º–∞—Å—Ç–µ—Ä–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (—à–∞–≥ 1). –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ."""
    # Remove last bot message, if any
    last = context.user_data.pop("last_bot_msg", None)
    if last:
        try:
            await last.delete()
        except:
            pass
    # Remove triggering user message ("‚ú® –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É") if present
    if update.message and update.message.text:
        try:
            await update.message.delete()
        except:
            pass
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
    context.user_data["new_order"] = {}

    last = await update.message.reply_text(
        "üìù *–®–∞–≥ 1 / 11*\n"
        "–°–∫–æ–ª—å–∫–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–µ—Ä–µ–≤–µ–∑—Ç–∏? (—á–∏—Å–ª–æ–º):",
        parse_mode="Markdown",
        reply_markup=BACK_KB
    )
    context.user_data["last_bot_msg"] = last
    return PUB_CAR_COUNT

# --- Filter conversation states ---
FILT_ORIGIN, FILT_DEST, FILT_CARGO, FILT_REWARD = range(13, 17)
BONUS_INPUT = 34    # –æ–¥–Ω–æ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ–º–µ—Ä –≤–Ω–µ –¥—Ä—É–≥–∏—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
# ----------- Bonus Calculator -----------
async def bonus_calc_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Remove triggering user message ("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±–æ–Ω—É—Å–∞") if present
    if update.message and update.message.text:
        try:
            await update.message.delete()
        except:
            pass
    """–ó–∞–ø—Ä–æ—Å —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏."""
    tg_id = update.effective_user.id
    # --- bonus banner ---
    try:
        last_banner = await context.bot.send_photo(
            chat_id=tg_id,
            photo=BONUS_BANNER_FILE_ID,
            caption=BONUS_BANNER_TEXT,
            parse_mode="Markdown"
        )
        context.user_data["last_bot_msg_banner"] = last_banner
    except Exception as e:
        print("Bonus banner error:", e)
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å
    try:
        prof = await _http_get_json(f"{SERVER_URL}/agent/{tg_id}")
        role = prof.get("agent_type")
    except Exception:
        role = context.user_data.get("role")
    context.user_data["calc_role"] = role or "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
    last = await update.message.reply_text(
        "üí° –î–∞–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è *–±–µ–∑ —É—á—ë—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤*.\n"
        "üîî –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è *—Å –ù–î–°*, –≤–∞—à –±–æ–Ω—É—Å –±—É–¥–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞ –º–∏–Ω—É—Å *20‚ÄØ%* ‚Äï —Ç–µ–º —Å–∞–º—ã–º –≤—ã —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏ —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ! üöÄ\n\n"
        "üìä –í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫–∏, ‚ÇΩ (—á–∏—Å–ª–æ–º):",
        parse_mode="Markdown",
        reply_markup=BACK_KB
    )
    context.user_data["last_bot_msg"] = last
    return BONUS_INPUT

async def bonus_calc_compute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–æ–Ω—É—Å –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    raw = update.message.text.strip().replace(" ", "").replace("‚ÄØ", "")
    try:
        cost = int(float(raw))
    except ValueError:
        await update.message.reply_text("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 120000")
        return BONUS_INPUT
    role = context.user_data.get("calc_role", "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")
    if role == "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å":
        # –î—Ä–∞–π–≤–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç —Ä–æ–≤–Ω–æ 3‚ÄØ% –æ—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–π —Å—É–º–º—ã
        bonus = int(round(cost * EXEC_BONUS_RATE))
    else:
        # –ù–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ–ª—É—á–∞–µ—Ç 5‚ÄØ% –æ—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–π —Å—É–º–º—ã
        bonus = int(round(cost * CUST_BONUS_RATE))
    await update.message.reply_text(
        f"üèÜ –í–∞—à –±–æ–Ω—É—Å —Å–æ—Å—Ç–∞–≤–∏—Ç: *{fmt_money(bonus)} ‚ÇΩ*",
        parse_mode="Markdown"
    )
    # –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ–±—Ä–∞—Ç–Ω–æ
    await send_main_menu(context.bot, update.effective_user.id, role)
    return ConversationHandler.END
# ----------- Filter wizard functions -----------
async def filter_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∞—Å—Ç–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ inline‚Äë–∫–Ω–æ–ø–∫–µ,
    –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º callback_query, –∞ –Ω–µ update.message.
    """
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        "üîé –§–∏–ª—å—Ç—Ä\n–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è? (–∏–ª–∏ ¬´–ª—é–±–æ–π¬ª)",
        reply_markup=BACK_KB
    )
    context.user_data["flt"] = {}
    return FILT_ORIGIN

async def filt_origin(update, context):
    raw = update.message.text.strip()
    txt_lc = raw.lower()
    if txt_lc == "-" or txt_lc.startswith("–ª—é–±–æ"):
        # skip: no origin filter
        pass
    else:
        context.user_data.setdefault("flt", {})["origin"] = raw
    await update.message.reply_text(
        "–ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è? (–∏–ª–∏ ¬´–ª—é–±–æ–π¬ª)",
        reply_markup=BACK_KB
    )
    return FILT_DEST

async def filt_dest(update, context):
    raw = update.message.text.strip()
    txt_lc = raw.lower()
    if txt_lc == "-" or txt_lc.startswith("–ª—é–±–æ"):
        pass
    else:
        context.user_data.setdefault("flt", {})["dest"] = raw
    await update.message.reply_text(
        "–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ –≥—Ä—É–∑—É? (–∏–ª–∏ ¬´–ª—é–±–æ–π¬ª)",
        reply_markup=BACK_KB
    )
    return FILT_CARGO

async def filt_cargo(update, context):
    raw = update.message.text.strip()
    txt_lc = raw.lower()
    if txt_lc == "-" or txt_lc.startswith("–ª—é–±–æ"):
        pass
    else:
        context.user_data.setdefault("flt", {})["cargo_kw"] = raw
    await update.message.reply_text(
        "–ú–∏–Ω. –±–æ–Ω—É—Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é? (0 ‚Äî ¬´–ª—é–±–æ–π¬ª)",
        reply_markup=BACK_KB
    )
    return FILT_REWARD

async def filt_reward(update, context):
    try:
        r = int(update.message.text.strip())
    except ValueError:
        r = 0
    if r:
        context.user_data["flt"]["min_reward"] = r
    await update.message.reply_text("‚úÖ –§–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

# ---------- Back handlers for filter wizard ----------
async def filt_back_to_origin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîé –§–∏–ª—å—Ç—Ä\n–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è? (–∏–ª–∏ ¬´–ª—é–±–æ–π¬ª)",
        reply_markup=BACK_KB
    )
    return FILT_ORIGIN

async def filt_back_to_dest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è? (–∏–ª–∏ ¬´–ª—é–±–æ–π¬ª)",
        reply_markup=BACK_KB
    )
    return FILT_DEST

async def filt_back_to_cargo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ –≥—Ä—É–∑—É? (–∏–ª–∏ ¬´–ª—é–±–æ–π¬ª)",
        reply_markup=BACK_KB
    )
    return FILT_CARGO

async def filt_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ –§–∏–ª—å—Ç—Ä –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

# -------- MULTI‚ÄëPOINT wizard helpers --------
def _init_order_lists(ctx):
    ctx.user_data.setdefault("new_order", {}).setdefault("loads", [])
    ctx.user_data["new_order"].setdefault("unloads", [])

async def _ask_load_addr(update, ctx):
    _init_order_lists(ctx)
    await update.message.reply_text(
        f"üìù *–ü–æ–≥—Ä—É–∑–∫–∞¬†#{len(ctx.user_data['new_order']['loads'])+1}*\n"
        "–ê–¥—Ä–µ—Å –ø–æ–≥—Ä—É–∑–∫–∏ (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞):",
        parse_mode="Markdown",
        reply_markup=BACK_KB
    )
    return PUB_L_ADDR


# ---------- Conversation handlers ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    On /start:
    ‚Ä¢ Claim one‚Äëtime token if passed: /start <TOKEN>
    ‚Ä¢ If profile exists¬†‚Äì show menu
    ‚Ä¢ Else auto‚Äëregister using claimed role
    """
    tg_id = update.effective_user.id
    # --- welcome banner ---
    try:
        await context.bot.send_photo(
            chat_id=tg_id,
            photo=WELCOME_FILE_ID,
            caption=WELCOME_TEXT,
            parse_mode="Markdown"
        )
    except Exception as e:
        # if the image fails (e.g., wrong file_id) we simply ignore
        print("Welcome image error:", e)
    token_arg = context.args[0] if context.args else None

    # ---------- 1. Claim token ----------
    if token_arg:
        resp = requests.post(
            f"{SERVER_URL}/invite/claim",
            json={"telegram_id": tg_id, "token": token_arg},
            timeout=4
        )
        if resp.status_code != 200:
            await update.message.reply_text(
                "üö´ –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.\n"
                "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤—ã–¥–∞—Ç—å –Ω–æ–≤—ã–π."
            )
            return ConversationHandler.END

        role_from_token = resp.json()["role"]
        context.user_data["role"] = role_from_token
        # --- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ---
        role_label = _role_label(role_from_token)
        role_intro = {
            "–ù–∞–≤–∏–≥–∞—Ç–æ—Ä": "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞—Ö–æ–¥–∏—Ç—å –∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, –ø–æ–º–æ–≥–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–∞–º –∏ —Å–≤—è–∑—ã–≤–∞—Ç—å –∏—Ö —Å –ª—É—á—à–∏–º–∏ –î—Ä–∞–π–≤–µ—Ä–∞–º–∏. –ó–∞ –∫–∞–∂–¥—É—é —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é –ø–µ—Ä–µ–≤–æ–∑–∫—É –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–≤–æ–π –±–æ–Ω—É—Å.",
            "–î—Ä–∞–π–≤–µ—Ä": "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏, –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ —Å–∫–æ—Ä–æ—Å—Ç—å—é. –ó–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã.",
            "admin": "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ–º —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã.",
        }
        mountain = "–≠–ª—å–±—Ä—É—Å"
        msg = (
            f"üèîÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏—é ¬´–¢–µ—Ö–Ω–æ–õ–æ–≥–∏—Å—Ç–∏–∫–∞¬ª!\n\n"
            "–≠—Ç–æ –Ω–æ–≤–∞—è —ç–ø–æ—Ö–∞ –≤ —Å—Ñ–µ—Ä–µ –ª–æ–≥–∏—Å—Ç–∏–∫–∏. –ú—ã –∑–∞–ø—É—Å–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é CRM‚Äë–ø–ª–∞—Ç—Ñ–æ—Ä–º—É, —Å–æ–∑–¥–∞–Ω–Ω—É—é –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, —É—Å–∫–æ—Ä–µ–Ω–∏—è –∏ —É–ø—Ä–æ—â–µ–Ω–∏—è –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã.\n"
            "–í—ã —Å—Ç–æ–∏—Ç–µ —É –∏—Å—Ç–æ–∫–æ–≤ –ø–µ—Ä–µ–º–µ–Ω ‚Äî –∏ –∏–º–µ–Ω–Ω–æ –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Å–≤–æ–∏—Ç—å –Ω–æ–≤—ã–µ –≤–µ—Ä—à–∏–Ω—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n"
            f"*–í–∞—à–∞ —Ä–æ–ª—å*: {role_label}\n"
            f"{role_intro.get(role_label, '')}\n\n"
            f"–° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–∞—à–µ –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –Ω–∞ –≤–µ—Ä—à–∏–Ω—É —Å–∞–º–æ–π –∫—Ä–∞—Å–∏–≤–æ–π –∏ –≤—ã—Å–æ–∫–æ–π –≥–æ—Ä—ã ‚Äî {mountain}! ‚õ∞Ô∏è"
        )
        await update.message.reply_text(msg, parse_mode="Markdown")

    # ---------- 2. Fetch profile ----------
    try:
        r = requests.get(f"{SERVER_URL}/agent/{tg_id}", timeout=4)
        profile = r.json() if r.status_code == 200 else None
    except Exception:
        profile = None

    # ---------- 3. Auto‚Äëregister if no profile but role cached ----------
    if (not profile or "agent_type" not in profile) and context.user_data.get("role"):
        reg_payload = {
            "telegram_id": tg_id,
            "name": update.effective_user.full_name,
            "agent_type": context.user_data["role"],
            "phone": ""
        }
        try:
            requests.post(f"{SERVER_URL}/register_agent", json=reg_payload, timeout=4)
            profile = reg_payload
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return ConversationHandler.END

    # ---------- 4. Deny if still no profile ----------
    if not profile or "agent_type" not in profile:
        # --- ask for token interactively ---
        context.user_data["await_token"] = True
        await update.message.reply_text(
            "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω, –≤—ã–¥–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
        )
        return ASK_TOKEN

    # ---------- 5. Show main menu ----------
    role = profile["agent_type"]
    context.user_data["role"] = role
    # --- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ---
    role_label = _role_label(role)
    role_intro = {
        "–ù–∞–≤–∏–≥–∞—Ç–æ—Ä": "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞—Ö–æ–¥–∏—Ç—å –∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, –ø–æ–º–æ–≥–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–∞–º –∏ —Å–≤—è–∑—ã–≤–∞—Ç—å –∏—Ö —Å –ª—É—á—à–∏–º–∏ –î—Ä–∞–π–≤–µ—Ä–∞–º–∏. –ó–∞ –∫–∞–∂–¥—É—é —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é –ø–µ—Ä–µ–≤–æ–∑–∫—É –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–≤–æ–π –±–æ–Ω—É—Å.",
        "–î—Ä–∞–π–≤–µ—Ä": "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏, –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ —Å–∫–æ—Ä–æ—Å—Ç—å—é. –ó–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã.",
        "admin": "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ–º —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã.",
    }
    mountain = "–≠–ª—å–±—Ä—É—Å"
    msg = (
        f"üèîÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏—é ¬´–¢–µ—Ö–Ω–æ–õ–æ–≥–∏—Å—Ç–∏–∫–∞¬ª!\n\n"
        "–≠—Ç–æ –Ω–æ–≤–∞—è —ç–ø–æ—Ö–∞ –≤ —Å—Ñ–µ—Ä–µ –ª–æ–≥–∏—Å—Ç–∏–∫–∏. –ú—ã –∑–∞–ø—É—Å–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é CRM‚Äë–ø–ª–∞—Ç—Ñ–æ—Ä–º—É, —Å–æ–∑–¥–∞–Ω–Ω—É—é –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, —É—Å–∫–æ—Ä–µ–Ω–∏—è –∏ —É–ø—Ä–æ—â–µ–Ω–∏—è –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã.\n"
        "–í—ã —Å—Ç–æ–∏—Ç–µ —É –∏—Å—Ç–æ–∫–æ–≤ –ø–µ—Ä–µ–º–µ–Ω ‚Äî –∏ –∏–º–µ–Ω–Ω–æ –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Å–≤–æ–∏—Ç—å –Ω–æ–≤—ã–µ –≤–µ—Ä—à–∏–Ω—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n"
        f"*–í–∞—à–∞ —Ä–æ–ª—å*: {role_label}\n"
        f"{role_intro.get(role_label, '')}\n\n"
        f"–° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–∞—à–µ –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –Ω–∞ –≤–µ—Ä—à–∏–Ω—É —Å–∞–º–æ–π –∫—Ä–∞—Å–∏–≤–æ–π –∏ –≤—ã—Å–æ–∫–æ–π –≥–æ—Ä—ã ‚Äî {mountain}! ‚õ∞Ô∏è"
    )
    await update.message.reply_text(msg, parse_mode="Markdown")
    # –£–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å —Ä–æ–ª—å—é
    # await update.message.reply_text(
    #     WELCOME_ROLE_MSG.get(role,
    #                          f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à–∞ —Ä–æ–ª—å: *{_role_label(role)}*"),
    #     parse_mode="Markdown"
    # )
    await send_main_menu(context.bot, tg_id, role)
    return ConversationHandler.END


# --- token input handler for interactive token request (/start without args) ---
async def token_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    Handles plain-text token when user was asked to provide it after /start.
    """
    if not context.user_data.get("await_token"):
        return ConversationHandler.END  # not our flow

    token_arg = update.message.text.strip()
    tg_id = update.effective_user.id

    # try claim
    resp = requests.post(
        f"{SERVER_URL}/invite/claim",
        json={"telegram_id": tg_id, "token": token_arg},
        timeout=4
    )
    if resp.status_code != 200:
        await update.message.reply_text(
            "üö´ –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.\n"
            "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤—ã–¥–∞—Ç—å –Ω–æ–≤—ã–π."
        )
        return ASK_TOKEN

    role_from_token = resp.json()["role"]
    context.user_data["role"] = role_from_token
    context.user_data.pop("await_token", None)

    # try autologin again
    await update.message.reply_text(
        WELCOME_ROLE_MSG.get(role_from_token,
                             f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à–∞ —Ä–æ–ª—å: *{_role_label(role_from_token)}*"),
        parse_mode="Markdown"
    )
    # mimic /start without args to finish registration/login
    return await start(update, context)


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Step 2: ask phone contact."""
    context.user_data["full_name"] = update.message.text.strip()

    kb_phone = ReplyKeyboardMarkup(
        [[KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_text(
        "2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
        reply_markup=kb_phone
    )
    return PHONE


async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Step 3: choose role."""
    if update.message.contact is None:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º¬ª.")
        return PHONE

    context.user_data["phone"] = update.message.contact.phone_number

    # —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º¬ª
    await update.message.reply_text(
        "‚òéÔ∏è –°–ø–∞—Å–∏–±–æ, –Ω–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω.",
        reply_markup=ReplyKeyboardRemove()
    )

    kb_role = InlineKeyboardMarkup(
        [[InlineKeyboardButton("–ù–∞–≤–∏–≥–∞—Ç–æ—Ä", callback_data="role_–∑–∞–∫–∞–∑—á–∏–∫"),
          InlineKeyboardButton("–î—Ä–∞–π–≤–µ—Ä",   callback_data="role_–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")]]
    )
    await update.message.reply_text(
        "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=kb_role
    )
    return ROLE

# ---------- choose role ----------
# ---------- choose role ----------
async def choose_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Finish registration, save to backend."""
    query = update.callback_query
    await query.answer()

    # --- –¥–∞–Ω–Ω—ã–µ –∏–∑ callback / user_data ---
    role = query.data.split("_")[1]
    name = context.user_data.get("full_name", "–ê–≥–µ–Ω—Ç")
    telegram_id = query.from_user.id
    phone = context.user_data.get("phone", "")

    # --- –ø—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ---
    r = requests.post(
        f"{SERVER_URL}/register_agent",
        json={
            "telegram_id": telegram_id,
            "name": name,
            "agent_type": role,
            "phone": phone
        },
        timeout=4
    )

    # --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è ¬´—É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω¬ª —á–µ—Ä–µ–∑ 400 ---
    if r.status_code == 400 and r.json().get("detail") == "–ê–≥–µ–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω":
        # c—á–∏—Ç–∞–µ–º —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º –º–µ–Ω—é
        await query.edit_message_text("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –º–µ–Ω—é –ø–æ–∫–∞–∑–∞–Ω–æ.",
                                      parse_mode="Markdown")
        await send_main_menu(context.bot, telegram_id, role)
        return ConversationHandler.END

    # --- –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ ---
    if r.status_code == 200:
        result = r.json().get("status", "ok")
        if result == "ok":
            header = "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!"
        elif result == "exists":
            header = "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!"
        else:   # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π, –Ω–æ —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            header = "‚úÖ –ì–æ—Ç–æ–≤–æ!"

        # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
        body = WELCOME_ROLE_MSG.get(role,
            "–ì–æ—Ç–æ–≤–æ! –ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é –Ω–∏–∂–µ.")
        await query.edit_message_text(f"{header}\n\n{body}",
                                      parse_mode="Markdown")
        await send_main_menu(context.bot, telegram_id, role)
        return ConversationHandler.END
    elif r.status_code == 400 and r.json().get("detail") == "–ê–≥–µ–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω":
        # –ø—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª: –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º –º–µ–Ω—é
        await send_main_menu(context.bot, telegram_id, role)
        await query.edit_message_text("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω, –º–µ–Ω—é –ø–æ–∫–∞–∑–∞–Ω–æ.",
                                      parse_mode="Markdown")
        return ConversationHandler.END
    else:
        # --- –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ ---
        try:
            err_data = r.json()
            err_detail = err_data.get("detail", "")
        except ValueError:
            err_detail = ""
        err_msg = err_detail or r.text
        print("Registration error:", r.status_code, err_msg)
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {err_msg}",
                                      parse_mode="Markdown")
        return ConversationHandler.END
# -------------------------------------------

def _short_route(message: str, limit: int = 25) -> str:
    route = message.split(",")[0].strip()
    return (route[:limit] + "‚Ä¶") if len(route) > limit else route

# --- Cabinet orders keyboard helper ---
def _cab_keyboard(rows: list[dict], page: int = 0) -> InlineKeyboardMarkup:
    """
    Builds inline keyboard for '–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç'
    ‚Ä¢ 2 buttons per row
    ‚Ä¢ CAB_PAGE_SIZE items per page (must be even)
    """
    start = page * CAB_PAGE_SIZE
    subset = rows[start:start + CAB_PAGE_SIZE]

    buttons: list[list[InlineKeyboardButton]] = []
    for i in range(0, len(subset), 2):
        pair = subset[i:i+2]
        row: list[InlineKeyboardButton] = []
        for o in pair:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –º–∞—Ä—à—Ä—É—Ç –∏–∑ –ø–æ–ª—è message –≤–º–µ—Å—Ç–æ –Ω–æ–º–µ—Ä–∞
            message_text = o.get("message", "") or ""
            summary = message_text[:25] + ("‚Ä¶" if len(message_text) > 25 else "")
            caption = f"{STATUS_DOT.get(o.get('status'),'‚Ä¢')} {summary}"
            row.append(
                InlineKeyboardButton(
                    caption,
                    callback_data=f"task_{o['id']}"
                )
            )
        buttons.append(row)

    # navigation row
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"cab_{page-1}"))
    if start + CAB_PAGE_SIZE < len(rows):
        nav_row.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"cab_{page+1}"))
    if nav_row:
        buttons.append(nav_row)

    return InlineKeyboardMarkup(buttons)

# --------- ARCHIVE keyboard helper ----------
def _arch_keyboard(rows: list[dict], page: int = 0) -> InlineKeyboardMarkup:
    """
    Inline keyboard for archive list, two buttons per row.
    """
    start = page * ARCH_PAGE_SIZE
    subset = rows[start:start + ARCH_PAGE_SIZE]

    buttons: list[list[InlineKeyboardButton]] = []
    for i in range(0, len(subset), 2):
        pair = subset[i:i+2]
        row: list[InlineKeyboardButton] = []
        for o in pair:
            caption = f"{STATUS_DOT.get(o.get('status'), '‚Ä¢')} #{o['id']}"
            row.append(
                InlineKeyboardButton(
                    caption,
                    callback_data=f"arch_{o['id']}"
                )
            )
        buttons.append(row)

    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"cab_arch_{page-1}"))
    if start + ARCH_PAGE_SIZE < len(rows):
        nav_row.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"cab_arch_{page+1}"))
    if nav_row:
        buttons.append(nav_row)

    return InlineKeyboardMarkup(buttons)

async def show_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ *–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö* –∑–∞—è–≤–æ–∫.
    ...
    """
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É TASKS_TEXT, —É–¥–∞–ª—è–µ–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ-–∫–Ω–æ–ø–∫—É
    if update.message and update.message.text == TASKS_TEXT:
        try:
            await update.message.delete()
        except:
            pass

    # Remove last bot message, if any
    last = context.user_data.pop("last_bot_msg", None)
    if last:
        try:
            await last.delete()
        except:
            pass
    # Also remove wallet banner if present
    banner = context.user_data.pop("last_bot_msg_banner", None)
    if banner:
        try:
            await banner.delete()
        except:
            pass

    print(f"[DEBUG show_tasks] called with message.text={update.message.text!r}")
    if update.message.text != TASKS_TEXT:
        return

    tg_id = update.effective_user.id
    # ‚Ä¶ –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ‚Ä¶
    is_admin = tg_id in ADMINS
    # determine role
    try:
        prof = await _http_get_json(f"{SERVER_URL}/agent/{tg_id}")
        role = prof.get("agent_type")
    except Exception:
        role = None

    print(f"[DEBUG show_tasks] tg_id={tg_id}, is_admin={is_admin}, role={role}")

    # fetch orders based on admin status or role
    if is_admin and role == "admin":
        # Admin: fetch open and confirmed orders via paginated admin endpoint
        url = f"{SERVER_URL}/admin/orders?limit=15"
        print(f"[DEBUG show_tasks] fetching URL: {url}")
        all_orders = await _http_get_json(url)
        # filter out paid orders only
        rows = [
            o for o in all_orders
            if not (("paid" in str(o.get("status","")).lower()) or ("–æ–ø–ª–∞—á" in str(o.get("status","")).lower()))
        ]
        print(f"[DEBUG show_tasks] fetched rows count: {len(rows)}; rows: {rows}")
    elif role == "–∑–∞–∫–∞–∑—á–∏–∫":
        url = f"{SERVER_URL}/orders/by_customer_open/{tg_id}"
        print(f"[DEBUG show_tasks] fetching URL: {url}")
        rows = await _http_get_json(url)
        print(f"[DEBUG show_tasks] fetched rows count: {len(rows)}; rows: {rows}")
    elif role == "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å":
        url = f"{SERVER_URL}/open_orders?limit=15"
        print(f"[DEBUG show_tasks] fetching URL: {url}")
        rows = await _http_get_json(url)
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "active"
        rows = [
            o for o in rows
            if (o.get("status") or "").lower().strip() == "active"
        ]
        print(f"[DEBUG show_tasks] filtered driver rows count: {len(rows)}; rows: {rows}")
    else:
        url = f"{SERVER_URL}/open_orders?limit=15"
        print(f"[DEBUG show_tasks] fetching URL: {url}")
        rows = await _http_get_json(url)
        print(f"[DEBUG show_tasks] fetched rows count: {len(rows)}; rows: {rows}")

    if not rows:
        last = await update.message.reply_text("‚úÖ –ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞—è–≤–æ–∫.")
        # Re-display the main ReplyKeyboard at the bottom
        menu = await send_main_menu(context.bot, tg_id, role)
        context.user_data["last_bot_msg"] = menu
        return

    buttons = []
    for o in rows:
        # Use the order message as route summary
        message_text = o.get("message", "") or ""
        # Truncate to 25 characters if necessary
        summary = message_text[:25] + ("‚Ä¶" if len(message_text) > 25 else "")
        caption = f"{STATUS_DOT.get(o.get('status'),'‚Ä¢')} {summary}"
        buttons.append([
            InlineKeyboardButton(
                caption,
                callback_data=f"{'admin_order' if is_admin and role == 'admin' else 'task'}_{o.get('id')}"
            )
        ])
    back_cb = "admin_back_main" if is_admin else "back_to_cabinet"
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_cb)])
    last = await update.message.reply_text("–¢–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏:", reply_markup=InlineKeyboardMarkup(buttons))
    # Re-display the main ReplyKeyboard at the bottom
    menu = await send_main_menu(context.bot, tg_id, role)
    context.user_data["last_bot_msg"] = menu

async def task_details_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # --- –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    tg_id = query.from_user.id
    try:
        prof = await _http_get_json(f"{SERVER_URL}/agent/{tg_id}")
        role = prof.get("agent_type")
    except Exception:
        role = None

    order_id = int(query.data.split("_")[1])

    resp = requests.get(f"{SERVER_URL}/order/{order_id}")
    if resp.status_code != 200:
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")
        return
    detail = resp.json()

    # --- status label ---
    STATUS_LABELS = {
        "active":      "üÜï –ê–∫—Ç–∏–≤–Ω–∞",
        "confirmed":   "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
        "in_progress": "üöö –í —Ä–∞–±–æ—Ç–µ",
        "done":        "üì¶ –ò—Å–ø–æ–ª–Ω–µ–Ω–∞",
        "paid":        "üí∞ –û–ø–ª–∞—á–µ–Ω–∞",
        "new":         "üÜï –í –æ–∂–∏–¥–∞–Ω–∏–∏",
        "completed":   "üì¶ –ò—Å–ø–æ–ª–Ω–µ–Ω–∞",
        "archived":    "üìÇ –ê—Ä—Ö–∏–≤",
        "cancelled":   "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞",
    }
    status = detail.get("status", "")
    status_line = f"üìã –°—Ç–∞—Ç—É—Å: {STATUS_LABELS.get(status, status)}\n"
    header = f"[#{detail['id']}] {detail['message']}"
    sections = [status_line + header]

    # –ü—É–Ω–∫—Ç—ã –ø–æ–≥—Ä—É–∑–∫–∏
    if detail.get("loads"):
        sections.append("üìç –ü—É–Ω–∫—Ç—ã –ø–æ–≥—Ä—É–∑–∫–∏:")
        for i, l in enumerate(detail["loads"], start=1):
            sections.append(f"  {i}. {l.get('place','')} ({l.get('date','')})")
        sections.append("")

    # –ü—É–Ω–∫—Ç—ã –≤—ã–≥—Ä—É–∑–∫–∏
    if detail.get("unloads"):
        sections.append("üìç –ü—É–Ω–∫—Ç—ã –≤—ã–≥—Ä—É–∑–∫–∏:")
        for i, u in enumerate(detail["unloads"], start=1):
            sections.append(f"  {i}. {u.get('place','')} ({u.get('date','')})")
        sections.append("")

    # –°–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω
    cars = detail.get("cars", [])
    if cars:
        car_strings = []
        for car in cars:
            b = car.get("brand", "").strip()
            m = car.get("model", "").strip()
            name = f"{b} {m}".strip()
            car_strings.append(f"1√ó{name}")
        sections.append(f"üöö –ì—Ä—É–∑: {'; '.join(car_strings)}")
    else:
        # Fallback: –µ—Å–ª–∏ –Ω–µ—Ç –º–∞—Å—Å–∏–≤–∞ cars, –ø–æ–∫–∞–∑–∞—Ç—å car_count –∏ car_models
        car_count = detail.get("car_count")
        car_models = detail.get("car_models", "").strip()
        if car_count and car_models:
            sections.append(f"üöö –ì—Ä—É–∑: {car_count}√ó{car_models}")

    # –°—Ç–∞–≤–∫–∏ –∏ –±–æ–Ω—É—Å—ã
    budget_text = detail.get("budget", "")
    if budget_text:
        # –°—Ç–∞–≤–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
        sections.append(f"üíµ –°—Ç–∞–≤–∫–∞ (–∑–∞–∫–∞–∑—á–∏–∫): {budget_text}")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä "100 000 —Ä—É–±", –≤ —á–∏—Å–ª–æ 100000
        customer_amt = _clean_money(budget_text)
        # –¶–µ–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: –º–∏–Ω—É—Å 12%
        exec_amt = int(customer_amt * 0.88)
        # –ë–æ–Ω—É—Å –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞: 3%
        nav_bonus = int(customer_amt * 0.03)

        # –í—ã–≤–æ–¥–∏–º —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø—Ä–æ–±–µ–ª–∞–º–∏ —Ç—ã—Å—è—á
        sections.append(f"üíµ –°—Ç–∞–≤–∫–∞ (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å): {exec_amt:,} —Ä—É–±".replace(",", " "))
        sections.append(f"üèÜ –ë–æ–Ω—É—Å –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞: +{nav_bonus:,} ‚ÇΩ".replace(",", " "))

    pay_terms_text = (detail.get("pay_terms") or "").strip()
    vat_flag = detail.get("vat", True)

    if pay_terms_text:
        sections.append(f"üí≥ –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã: {pay_terms_text}")
    else:
        # fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —Å –ù–î–° –∏–ª–∏ –±–µ–∑, –µ—Å–ª–∏ —è–≤–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –Ω–µ—Ç
        sections.append("üí≥ –û–ø–ª–∞—Ç–∞ —Å –ù–î–°" if vat_flag else "üí≥ –û–ø–ª–∞—Ç–∞ –±–µ–∑ –ù–î–°")

    # –ë–æ–Ω—É—Å—ã
    bonus_exec = detail.get("reward_exec") or 0
    bonus_cust = detail.get("reward_cust") or 0
    if role == "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å":
        sections.append(f"üèÜ –í–∞—à –±–æ–Ω—É—Å: +{fmt_money(bonus_exec)} ‚ÇΩ")
        sections.append(f"üèÜ –ë–æ–Ω—É—Å –∑–∞–∫–∞–∑—á–∏–∫–∞: +{fmt_money(bonus_cust)} ‚ÇΩ")
    elif role == "–∑–∞–∫–∞–∑—á–∏–∫":
        sections.append(f"üèÜ –í–∞—à –±–æ–Ω—É—Å: +{fmt_money(bonus_cust)} ‚ÇΩ")
        sections.append(f"üèÜ –ë–æ–Ω—É—Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: +{fmt_money(bonus_exec)} ‚ÇΩ")
    else:
        sections.append(f"üèÜ –ë–æ–Ω—É—Å –∑–∞–∫–∞–∑—á–∏–∫–∞: +{fmt_money(bonus_cust)} ‚ÇΩ")
        sections.append(f"üèÜ –ë–æ–Ω—É—Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: +{fmt_money(bonus_exec)} ‚ÇΩ")

    text = "\n".join(sections)

    # –∫–Ω–æ–ø–∫–∏ –ø–æ —Ä–æ–ª—è–º:
    if role == "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å" and status == "active":
        kb_buttons = [
            [InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close_{order_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_tasks")]
        ]
    elif role == "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å" and status == "confirmed":
        kb_buttons = [
            [InlineKeyboardButton("üìë –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä", callback_data=f"upload_contract_{order_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_tasks")]
        ]
    elif role == "–∑–∞–∫–∞–∑—á–∏–∫" and status == "confirmed":
        kb_buttons = [
            [InlineKeyboardButton("üìë –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä", callback_data=f"upload_contract_{order_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"nv_cancel_{order_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_cabinet")]
        ]
    elif role == "–∑–∞–∫–∞–∑—á–∏–∫" and status not in ("cancelled", "paid"):
        kb_buttons = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"nv_cancel_{order_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_cabinet")]
        ]
    elif role == "admin":
        kb_buttons = [
            [InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"admin_change_{order_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_cabinet")]
        ]
    else:
        kb_buttons = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_cabinet")]
        ]

    kb = InlineKeyboardMarkup(kb_buttons)

    await query.edit_message_text(text, reply_markup=kb)


# ----------- Show cabinet/profile helper -----------
async def show_cabinet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # Remove previously sent bot message (last_bot_msg), if any
    last = context.user_data.pop("last_bot_msg", None)
    if last:
        try:
            await last.delete()
        except:
            pass
    # Also remove wallet banner if present
    banner = context.user_data.pop("last_bot_msg_banner", None)
    if banner:
        try:
            await banner.delete()
        except:
            pass
    # 1) –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-—Ç—Ä–∏–≥–≥–µ—Ä (¬´–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç¬ª), —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if update.message and update.message.text:
        try:
            await update.message.delete()
        except:
            pass

    # 2) –ï—Å–ª–∏ —ç—Ç–æ callback (‚¨ÖÔ∏è –ù–∞–∑–∞–¥), —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ —É—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if hasattr(update, "callback_query") and update.callback_query is not None:
        try:
            await update.callback_query.message.delete()
        except:
            pass
        await back_to_main(update, context)
        return

    tg_id = update.effective_user.id

    # --- cabinet banner ---
    try:
        last = await context.bot.send_photo(
            chat_id=tg_id,
            photo=CABINET_BANNER_FILE_ID,
            caption=CABINET_BANNER_TEXT,
            parse_mode="Markdown"
        )
        context.user_data["last_bot_msg"] = last
    except Exception as e:
        print("Cabinet banner error:", e)

    # --- –ø—Ä–æ—Ñ–∏–ª—å ---
    prof = await _http_get_json(f"{SERVER_URL}/agent/{tg_id}")
    if not prof or not isinstance(prof, dict) or "agent_type" not in prof:
        last = await update.message.reply_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞ /start")
        context.user_data["last_bot_msg"] = last
        return

    name = prof.get("name", "").split()[0] or "–¥—Ä—É–≥"
    greeting = random.choice(GREETINGS).format(name=name)
    last = await context.bot.send_message(chat_id=tg_id, text=greeting)
    role = prof["agent_type"]

    text = (f"*–ü—Ä–æ—Ñ–∏–ª—å*\n"
            f"*–§–ò–û:* {prof['name']}\n"
            f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {prof.get('phone','‚Äî')}\n"
            f"*–†–æ–ª—å:* {_role_label(role)}\n\n")

    if role in ("–∑–∞–∫–∞–∑—á–∏–∫", "customer", "admin"):
        # –æ—Ç–∫—Ä—ã—Ç—ã–µ –∏ –∞—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ù–∞–≤–∏–≥–∞—Ç–æ—Ä–∞: –±–µ—Ä—ë–º –≥–æ—Ç–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        url_open   = f"{SERVER_URL}/orders/by_customer_open/{tg_id}"
        url_closed = f"{SERVER_URL}/orders/by_customer_closed/{tg_id}"
        orders_open   = await _fetch_orders(url_open)
        orders_closed = await _fetch_orders(url_closed)

    else:  # –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        url_open   = f"{SERVER_URL}/orders/by_executor_open/{tg_id}"
        url_closed = f"{SERVER_URL}/orders/by_executor/{tg_id}"      # –∑–∞–∫—Ä—ã—Ç—ã–µ (done/paid)
        orders_open   = await _fetch_orders(url_open)
        orders_closed = await _fetch_orders(url_closed)

    # --- DEBUG: –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ orders_closed —Å –∫–ª—é—á–µ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ ---
    if role == "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å":
        pass

    # send profile first, then orders list as buttons
    last = await context.bot.send_message(
        chat_id=tg_id,
        text=text,
        parse_mode="Markdown"
    )
    context.user_data["last_bot_msg"] = last


    # --- –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–ø–∏—Å–∫–∏
    context.user_data.pop("cab_orders", None)
    context.user_data.pop("arch_rows",  None)
    # --- —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ ¬´–ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ¬ª –∏ ¬´–ê—Ä—Ö–∏–≤¬ª ---
    if role in ("–∑–∞–∫–∞–∑—á–∏–∫", "customer"):
        # –∑–∞–∫–∞–∑—á–∏–∫: –≤ —Ä–∞–±–æ—Ç–µ = –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ; –∞—Ä—Ö–∏–≤ = –≤—Å–µ –∑–∞–∫—Ä—ã—Ç—ã–µ
        if orders_open:
            context.user_data["cab_orders"] = orders_open
        if orders_closed:
            context.user_data["arch_rows"] = orders_closed
    else:
        # --- —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ---
        work_rows = []
        arch_rows = []
        seen_ids  = set()

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ö–æ–¥–∏–º –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—É—Å ‚Äúpaid‚Äù –∏–º–µ–ª –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.
        for o in orders_closed + orders_open:        # closed ‚Üí open
            oid = o.get("id")
            if oid in seen_ids:
                continue
            seen_ids.add(oid)

            st = (o.get("status") or "").replace("\u00a0", " ").strip().lower()
            # –í—Å—ë, —á—Ç–æ –∏–º–µ–µ—Ç –∫–æ—Ä–µ–Ω—å ¬´–æ–ø–ª–∞—á¬ª‚ÄØ–∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç ¬´paid¬ª,
            # –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º –∑–∞—è–≤–∫–∞–º¬†‚Üí –∞—Ä—Ö–∏–≤.
            if ("paid" in st) or ("–æ–ø–ª–∞—á" in st):
                arch_rows.append(o)
            else:
                work_rows.append(o)

        if work_rows:
            context.user_data["cab_orders"] = work_rows
        if arch_rows:
            context.user_data["arch_rows"] = arch_rows

    kb_main = InlineKeyboardMarkup(
        [[InlineKeyboardButton("üìÑ –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="cab_work")],
         [InlineKeyboardButton("üìö –ê—Ä—Ö–∏–≤",       callback_data="cab_arch_0")]]
    )

    last = await context.bot.send_message(
        chat_id=tg_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        parse_mode="Markdown",
        reply_markup=kb_main
    )
    context.user_data["last_bot_msg"] = last
    # Re-display the main ReplyKeyboard at the bottom
    # Ensure role is available for send_main_menu
    if "role" in locals():
        pass
    else:
        role = prof.get("agent_type")
    menu = await send_main_menu(context.bot, tg_id, role)
    context.user_data["last_bot_msg"] = menu
    # Re-display the main ReplyKeyboard at the bottom
    last_menu = await send_main_menu(context.bot, tg_id, role)
    context.user_data["last_bot_msg"] = last_menu
async def cabinet_page_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles ‚óÄÔ∏è / ‚ñ∂Ô∏è navigation in cabinet orders list."""
    query = update.callback_query
    await query.answer()
    page = int(query.data.split("_")[1])
    rows = context.user_data.get("cab_orders") or []
    if not rows:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ alert,
        # —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç–µ.
        await query.answer()
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="‚úÖ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ."
        )
        return
    kb = _cab_keyboard(rows, page)
    await query.edit_message_reply_markup(reply_markup=kb)


# ----------- Archive pagination callback -----------
async def cabinet_arch_page_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Pagination for archive inside cabinet."""
    query = update.callback_query
    await query.answer()
    page = int(query.data.split("_")[2])
    rows = context.user_data.get("arch_rows") or []
    if not rows:
        await query.answer()
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="üìÇ –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç."
        )
        return
    kb = _arch_keyboard(rows, page)
    await query.edit_message_reply_markup(reply_markup=kb)


# ----------- Show current orders from cabinet button -----------
async def cabinet_work_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Opens list of current (unpaid) orders from cabinet button."""
    query = update.callback_query
    await query.answer()
    rows = context.user_data.get("cab_orders") or []
    if not rows:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ alert,
        # —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç–µ.
        await query.answer()
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="‚úÖ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ."
        )
        return
    kb = _cab_keyboard(rows, page=0)
    await context.bot.send_message(
        chat_id=query.from_user.id,
        text="–ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ:",
        reply_markup=kb
    )


# ----------- archive details callback -----------
async def archive_details_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–∫—Ä—ã—Ç–æ–π –∑–∞—è–≤–∫–∏ (–∞—Ä—Ö–∏–≤)."""
    query = update.callback_query
    await query.answer()
    tg_id = query.from_user.id
    try:
        prof = requests.get(f"{SERVER_URL}/agent/{tg_id}", timeout=4).json()
        role = prof.get("agent_type")
    except Exception:
        role = None
    order_id = int(query.data.split("_")[1])

    r = requests.get(f"{SERVER_URL}/order/{order_id}", timeout=4)
    if r.status_code != 200:
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏.")
        return
    o: Dict = r.json()
    msg         = o.get("message", "‚Äî")
    final_amt   = o.get("final_amt") or 0
    bonus_cust  = o.get("reward_cust") or 0
    bonus_exec  = o.get("reward_exec") or 0
    driver_fio  = o.get("driver_fio") or "‚Äî"

    text = (f"*#{o['id']}*  {msg}\n"
            f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞:* {fmt_money(final_amt)} ‚ÇΩ\n"
            f"üèÜ *–ë–æ–Ω—É—Å –∑–∞–∫–∞–∑—á–∏–∫–∞:* {fmt_money(bonus_cust)} ‚ÇΩ\n"
            f"üèÜ *–ë–æ–Ω—É—Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:* {fmt_money(bonus_exec)} ‚ÇΩ")
    # Cargo and route
    text += f"\nüì¶ –ì—Ä—É–∑/–ú–∞—Ä—à—Ä—É—Ç: {o.get('message', '‚Äî')}\n"
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    car_count = o.get("car_count")
    car_models = o.get("car_models", "").strip()
    if car_count:
        text += f"üöö –ì—Ä—É–∑: {car_count} √ó {car_models}\n"
    if role == "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å":
        text += f"\nüë§ *–í–æ–¥–∏—Ç–µ–ª—å:* {driver_fio}"
    await query.edit_message_text(
        text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_cabinet")]]
        )
    )

async def filter_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Clear stored filter and refresh button caption."""
    query = update.callback_query
    await query.answer("–§–∏–ª—å—Ç—Ä —Å–±—Ä–æ—à–µ–Ω")
    context.user_data.pop("flt", None)
    await query.message.delete()

# ---------- async HTTP helper ----------
async def _http_get_json(url: str, *, data: dict | None = None, timeout: int = 6):
    """
    Asynchronously GET (or POST if data given) JSON from backend using aiohttp.
    Falls back to {} on error.
    """
    method = "POST" if data else "GET"
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=timeout)) as sess:
            if method == "POST":
                async with sess.post(url, json=data) as resp:
                    return await resp.json(content_type=None)
            else:
                async with sess.get(url) as resp:
                    return await resp.json(content_type=None)
    except Exception as e:
        print("HTTP error", method, url, ":", e)
        return {}

async def _fetch_orders(url: str) -> list[dict]:
    data = await _http_get_json(url)
    if isinstance(data, dict):
        data = data.get("orders") or data.get("items") or data.get("data") or []
    return data if isinstance(data, list) else []

async def show_my_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
        # Remove wallet banner if present
    banner = context.user_data.pop("last_bot_msg_banner", None)
    if banner:
        try:
            await banner.delete()
        except:
            pass
    tg_id = update.effective_user.id
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å
    try:
        prof = await _http_get_json(f"{SERVER_URL}/agent/{tg_id}")
        role = prof.get("agent_type")
    except Exception:
        role = None

    if role in ("–∑–∞–∫–∞–∑—á–∏–∫", "customer", "admin"):
        url = f"{SERVER_URL}/orders/by_customer_open/{tg_id}"
        rows = await _fetch_orders(url)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö, –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö, –∞—Ä—Ö–∏–≤–Ω—ã—Ö
        rows = [o for o in rows if o.get("status") not in ("paid", "cancelled", "archived")]
    elif role == "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å":
        # –ë–µ—Ä—ë–º –í–°–ï –∑–∞—è–≤–∫–∏ —ç—Ç–æ–≥–æ –¥—Ä–∞–π–≤–µ—Ä–∞
        url = f"{SERVER_URL}/orders/by_executor_open/{tg_id}"
        rows = await _fetch_orders(url)
        # —ç–Ω–¥–ø–æ–∏–Ω—Ç —É–∂–µ –∏—Å–∫–ª—é—á–∞–µ—Ç active –∏ paid, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –Ω–µ –Ω—É–∂–µ–Ω
        # –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç—å—Å—è:
        rows = [o for o in rows if (o.get("status") or "").lower() != "paid"]
    else:
        url = f"{SERVER_URL}/orders/by_executor_open/{tg_id}"
        rows = await _fetch_orders(url)

    if not rows:
        await update.message.reply_text("‚úÖ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ.")
        return

        for o in rows[:30]:
            oid = o["id"]
            dot = STATUS_DOT.get(o.get("status", ""), "‚Ä¢")
            raw_msg = o.get("message", "") or ""
            # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –º–∞—Ä—à—Ä—É—Ç (—á–∞—Å—Ç—å –ø–æ—Å–ª–µ '|') –±–µ–∑ —Å—Ç–∞–≤–∫–∏
            parts = raw_msg.split("|", 1)
            route_and_budget = parts[1].strip() if len(parts) > 1 else raw_msg
            m = re.match(r"(.+?)\s+\d", route_and_budget)
            route = m.group(1) if m else route_and_budget
            summary = route.strip()[:25] + ("‚Ä¶" if len(route.strip()) > 25 else "")
            caption = f"{dot} {summary}"
            buttons.append([InlineKeyboardButton(caption, callback_data=f"task_{oid}")])
    await update.message.reply_text(
        "–í–∞—à–∏ –∑–∞—è–≤–∫–∏:" if role == "–∑–∞–∫–∞–∑—á–∏–∫" else "–ú–æ–∏ –∑–∞—è–≤–∫–∏:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
        # Remove wallet banner if present
    banner = context.user_data.pop("last_bot_msg_banner", None)
    if banner:
        try:
            await banner.delete()
        except:
            pass
    tg_id = update.effective_user.id
    is_admin = tg_id in ADMINS
    # determine role
    try:
        prof = await _http_get_json(f"{SERVER_URL}/agent/{tg_id}")
        role = prof.get("agent_type")
    except Exception:
        role = None

    # fetch all orders for admin, else per user
    if is_admin:
        # Admin: fetch only paid orders via paginated admin endpoint
        url = f"{SERVER_URL}/admin/orders?status=paid&limit=15"
        rows = await _fetch_orders(url)
    elif role in ("–∑–∞–∫–∞–∑—á–∏–∫", "customer", "admin"):
        # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ (–∞—Ä—Ö–∏–≤–Ω—ã–µ) –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        rows = await _fetch_orders(f"{SERVER_URL}/orders/by_customer_closed/{tg_id}")
    elif role == "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å":
        # fetch closed (done/paid) orders for driver
        rows = await _fetch_orders(f"{SERVER_URL}/orders/by_executor/{tg_id}")
        rows = [
            o for o in rows
            if o.get("executor_id") == tg_id
            and (o.get("status") or "").lower() == "paid"
        ]
    else:
        rows = await _fetch_orders(f"{SERVER_URL}/open_orders?limit=15")

    if not rows:
        await update.message.reply_text("üìÇ –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç.")
        return

    buttons = [
        [InlineKeyboardButton(
            f"{STATUS_DOT.get(o.get('status'),'‚Ä¢')} #{o.get('id')}",
            callback_data=f"{'arch' if is_admin else 'arch'}_{o.get('id')}"
        )]
        for o in rows[:30]
    ]
    # Add a back button to return to the admin panel
    if is_admin:
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_main")])
    await update.message.reply_text("üìÇ –ê—Ä—Ö–∏–≤ –∑–∞—è–≤–æ–∫:", reply_markup=InlineKeyboardMarkup(buttons))

def main() -> None:
    async def wallet_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
        # Remove last bot message, if any
        last = context.user_data.pop("last_bot_msg", None)
        if last:
            try:
                await last.delete()
            except:
                pass
        # Delete triggering user message ("üí∞ –ú–æ–π –∫–æ—à–µ–ª—ë–∫") if present
        if update.message:
            try:
                await update.message.delete()
            except:
                pass

        tg_id = update.effective_user.id
        try:
            prof = await _http_get_json(f"{SERVER_URL}/agent/{tg_id}")
            role = prof.get("agent_type")
        except Exception:
            role = None

        if role == "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å":
            url = f"{SERVER_URL}/orders/by_executor/{tg_id}"
            reward_field = "reward_exec"
        else:
            url = f"{SERVER_URL}/orders/by_customer/{tg_id}"
            reward_field = "reward_cust"

        resp = requests.get(url, timeout=4)
        if resp.status_code == 200:
            orders = resp.json()
        else:
            orders = []

        bonus_vat = 0
        bonus_no_vat = 0
        for o in orders:
            if o.get("vat"):
                bonus_vat += o.get(reward_field, 0) or 0
            else:
                bonus_no_vat += o.get(reward_field, 0) or 0

        total_no_vat = int(bonus_vat * 0.8 + bonus_no_vat)

        text = (
            f"üí∞ –ë–æ–Ω—É—Å—ã —Å –ù–î–°: {bonus_vat:,} ‚ÇΩ\n"
            f"üí∞ –ë–æ–Ω—É—Å—ã –±–µ–∑ –ù–î–°: {bonus_no_vat:,} ‚ÇΩ\n"
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –±–æ–Ω—É—Å–æ–≤ –±–µ–∑ –ù–î–°: {total_no_vat:,} ‚ÇΩ"
        )
        # Send wallet info and save as banner to delete later
        wallet_msg = await update.message.reply_text(text)
        context.user_data["last_bot_msg_banner"] = wallet_msg

        # Then re-show main menu keyboard below
        last = await send_main_menu(context.bot, tg_id, role)
        context.user_data["last_bot_msg"] = last
    # Handler to go back to Active Tasks list for drivers
    async def back_to_tasks_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏
        try:
            await query.message.delete()
        except:
            pass

        tg_id = query.from_user.id
        # –ò–º–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É TASKS_TEXT, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –∑–∞–Ω–æ–≤–æ
        from types import SimpleNamespace
        fake_msg = SimpleNamespace(
            text=TASKS_TEXT,
            chat=SimpleNamespace(id=tg_id),
            reply_text=query.message.reply_text
        )
        fake_update = SimpleNamespace(message=fake_msg, effective_user=query.from_user)
        await show_tasks(fake_update, context)
    app = ApplicationBuilder().token(TOKEN).build()
    global APP
    APP = app

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME:  [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHONE: [MessageHandler(filters.CONTACT, get_phone)],
            ROLE:  [CallbackQueryHandler(choose_role, pattern=r"^role_")],
            ASK_TOKEN: [MessageHandler(filters.TEXT & ~filters.COMMAND, token_input)],
        },
        fallbacks=[],
        per_message=True,
    )

    tok_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_token_menu, pattern=r"^admin_token_menu$")],
        states={
            TOK_MENU: [
                CallbackQueryHandler(admin_token_generate_cb, pattern=r"^admin_token_(?:cust|exec)$")
            ],
            TOK_DONE: [
                CallbackQueryHandler(admin_token_menu, pattern=r"^admin_token_menu$")
            ],
        },
        fallbacks=[],
        per_message=True,
    )

    # handler for closing flow
    close_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_close_callback, pattern=r"^close_\d+$")],
        states={
            # 1) Transport-related questions first
            CLOSE_FIO: [
                MessageHandler(filters.Regex(BACK_PATTERN), cancel_wizard),
                MessageHandler(filters.TEXT, close_get_fio)
            ],
            CLOSE_PASSPORT: [
                MessageHandler(filters.Regex(BACK_PATTERN), cancel_wizard),
                MessageHandler(filters.TEXT, close_get_passport)
            ],
            CLOSE_LICENSE: [
                MessageHandler(filters.Regex(BACK_PATTERN), cancel_wizard),
                MessageHandler(filters.TEXT, close_get_license)
            ],
            CLOSE_TRUCK: [
                MessageHandler(filters.Regex(BACK_PATTERN), cancel_wizard),
                MessageHandler(filters.TEXT, close_get_truck)
            ],
            CLOSE_TRAILER: [
                MessageHandler(filters.Regex(BACK_PATTERN), cancel_wizard),
                MessageHandler(filters.TEXT, close_get_trailer)
            ],
            CLOSE_INSURANCE: [
                MessageHandler(filters.Regex(BACK_PATTERN), cancel_wizard),
                MessageHandler(filters.TEXT, close_get_insurance)
            ],

            # 2) Then company-related questions
            CLOSE_INN: [
                MessageHandler(filters.Regex(BACK_PATTERN), cancel_wizard),
                MessageHandler(filters.TEXT, close_get_inn)
            ],
            CLOSE_COMPANY_CONFIRM: [
                CallbackQueryHandler(close_confirm_company, pattern=r"^cmp_yes$"),
                CallbackQueryHandler(close_confirm_company, pattern=r"^cmp_no$"),
                MessageHandler(filters.Regex(r"^(?i:–¥–∞|–Ω–µ—Ç)$"), close_confirm_company)
            ],
            CLOSE_COMPANY: [
                MessageHandler(filters.Regex(BACK_PATTERN), cancel_wizard),
                MessageHandler(filters.TEXT, close_get_company)
            ],
            CLOSE_KPP: [
                MessageHandler(filters.Regex(BACK_PATTERN), cancel_wizard),
                MessageHandler(filters.TEXT, close_get_kpp)
            ],
            BANK_NAME: [
                MessageHandler(filters.Regex(BACK_PATTERN), cancel_wizard),
                MessageHandler(filters.TEXT, close_get_bank_name)
            ],
            BANK_RS: [
                MessageHandler(filters.Regex(BACK_PATTERN), cancel_wizard),
                MessageHandler(filters.TEXT, close_get_bank_rs)
            ],
            BANK_KS: [
                MessageHandler(filters.Regex(BACK_PATTERN), cancel_wizard),
                MessageHandler(filters.TEXT, close_get_bank_ks)
            ],
            BANK_BIC: [
                MessageHandler(filters.Regex(BACK_PATTERN), cancel_wizard),
                MessageHandler(filters.TEXT, close_get_bank_bic)
            ],
            CLOSE_PAY: [
                CallbackQueryHandler(close_pay_choice, pattern=r"^pay_(?:vat|novat)$")
            ],
            CLOSE_ADDRESS: [
                MessageHandler(filters.Regex(BACK_PATTERN), cancel_wizard),
                MessageHandler(filters.TEXT, close_get_address)
            ],
            CLOSE_DIRECTOR: [
                MessageHandler(filters.Regex(BACK_PATTERN), cancel_wizard),
                MessageHandler(filters.TEXT, close_get_director)
            ],
        },
        fallbacks=[
            MessageHandler(filters.Regex(BACK_PATTERN), cancel_wizard),
            CommandHandler("cancel", cancel_wizard)
        ],
        per_user=True,
        per_message=True,
    )

    pub_wizard = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚ú® –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É$"), publish_form_intro)],
        states={
            PUB_CAR_COUNT: [
                MessageHandler(filters.Regex(BACK_PATTERN), back_to_publish_menu),
                MessageHandler(filters.TEXT & ~filters.COMMAND, pub_car_count)
            ],
            PUB_CAR_MODELS: [
                MessageHandler(filters.Regex(BACK_PATTERN), back_from_route),
                MessageHandler(filters.TEXT & ~filters.COMMAND, pub_cargo)
            ],
            PUB_VINS: [
                MessageHandler(filters.Regex(BACK_PATTERN), back_from_route),
                MessageHandler(filters.TEXT & ~filters.COMMAND, pub_vins)
            ],
            PUB_L_ADDR:   [MessageHandler(filters.Regex(BACK_PATTERN), back_from_route),
                           MessageHandler(filters.TEXT & ~filters.COMMAND, pub_load_addr)],
            PUB_L_DATE:   [MessageHandler(filters.Regex(BACK_PATTERN), back_from_route),
                           MessageHandler(filters.TEXT & ~filters.COMMAND, pub_load_date)],
            PUB_L_CONTACT:[MessageHandler(filters.Regex(BACK_PATTERN), back_from_route),
                           MessageHandler(filters.TEXT & ~filters.COMMAND, pub_load_contact)],
            PUB_L_MORE:   [MessageHandler(filters.TEXT & ~filters.COMMAND, pub_load_more)],

            PUB_U_ADDR:   [MessageHandler(filters.Regex(BACK_PATTERN), back_from_contacts),
                           MessageHandler(filters.TEXT & ~filters.COMMAND, pub_unload_addr)],
            PUB_U_DATE:   [MessageHandler(filters.Regex(BACK_PATTERN), back_from_contacts),
                           MessageHandler(filters.TEXT & ~filters.COMMAND, pub_unload_date)],
            PUB_U_CONTACT:[MessageHandler(filters.Regex(BACK_PATTERN), back_from_contacts),
                           MessageHandler(filters.TEXT & ~filters.COMMAND, pub_unload_contact)],
            PUB_U_MORE:   [MessageHandler(filters.TEXT & ~filters.COMMAND, pub_unload_more)],
            PUB_BUDGET:[MessageHandler(filters.Regex(BACK_PATTERN), back_from_contacts),
                         MessageHandler(filters.TEXT & ~filters.COMMAND, pub_budget)],
            PUB_PAY:    [
                CallbackQueryHandler(pub_pay_choice, pattern=r"^pay_(?:vat|novat)$"),
                MessageHandler(filters.Regex(BACK_PATTERN), back_from_budget),
                MessageHandler(filters.TEXT & ~filters.COMMAND, pub_pay)
            ],
            PUB_PAY_TERMS:  [MessageHandler(filters.TEXT & ~filters.COMMAND, pub_pay_terms)],
            PUB_INN:   [MessageHandler(filters.Regex(BACK_PATTERN), back_from_pay),
                        MessageHandler(filters.TEXT & ~filters.COMMAND, pub_inn)],
            PUB_COMPANY_NAME:    [MessageHandler(filters.TEXT & ~filters.COMMAND, pub_company_name)],
            PUB_COMPANY_KPP:     [MessageHandler(filters.TEXT & ~filters.COMMAND, pub_company_kpp)],
            PUB_COMPANY_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, pub_company_address)],
            PUB_COMPANY_ACCOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, pub_company_account)],
            PUB_COMPANY_BANK:    [MessageHandler(filters.TEXT & ~filters.COMMAND, pub_company_bank)],
            PUB_COMPANY_BIC:     [MessageHandler(filters.TEXT & ~filters.COMMAND, pub_company_bic)],
            PUB_DIR:   [MessageHandler(filters.Regex(BACK_PATTERN), back_from_pay),
                         MessageHandler(filters.TEXT & ~filters.COMMAND, pub_dir)],
            PUB_CONFIRM:[CallbackQueryHandler(pub_confirm, pattern=r"^pub_")],
            PUB_COMPANY_CONFIRM: [CallbackQueryHandler(pub_confirm_company, pattern=r"^cmp_")],
        },
        fallbacks=[
            MessageHandler(filters.Regex(r"^/cancel$"), cancel_wizard),
            CommandHandler("cancel", cancel_wizard)
        ],
        per_message=True,
        # per_message=True ‚Äî track CallbackQueryHandler states
    )

    # --- Filter conversation handler ---
    filter_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(filter_start, pattern="^flt_open$")],
        states={
            FILT_ORIGIN:[
                MessageHandler(filters.Regex(BACK_PATTERN), filt_cancel),
                MessageHandler(filters.TEXT & ~filters.COMMAND, filt_origin)
            ],
            FILT_DEST:[
                MessageHandler(filters.Regex(BACK_PATTERN), filt_back_to_origin),
                MessageHandler(filters.TEXT & ~filters.COMMAND, filt_dest)
            ],
            FILT_CARGO:[
                MessageHandler(filters.Regex(BACK_PATTERN), filt_back_to_dest),
                MessageHandler(filters.TEXT & ~filters.COMMAND, filt_cargo)
            ],
            FILT_REWARD:[
                MessageHandler(filters.Regex(BACK_PATTERN), filt_back_to_cargo),
                MessageHandler(filters.TEXT & ~filters.COMMAND, filt_reward)
            ],
        },
        fallbacks=[],
    )
    app.add_handler(tok_conv)
    app.add_handler(filter_conv)

    # --- Top‚Äëlevel text buttons ---
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f"^{MENU_LABEL}$"), show_cabinet))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f"^{PUBLISH_LABEL}$"), show_publish_menu))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f"^{TASKS_TEXT}$"), show_tasks))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f"^{HISTORY_LABEL}$"), show_history))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f"^{ADMIN_PANEL_LABEL}$"), show_admin_panel))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üí∞ –ú–æ–π –∫–æ—à–µ–ª—ë–∫$"), wallet_cb))

    # --- Global "–ù–∞–∑–∞–¥" from publish submenu ---
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f"^{BACK_LABEL}$"), back_to_main))

    # --- Callback for returning to tasks list ---
    app.add_handler(CallbackQueryHandler(back_to_tasks_cb, pattern="^back_to_tasks$"))

    # --- Bonus calculator conversation ---
    calc_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex(f"^{BONUS_CALC_LABEL}$"), bonus_calc_start)],
        states={
            BONUS_INPUT:[
                MessageHandler(filters.Regex(BACK_PATTERN), back_to_main),
                MessageHandler(filters.TEXT & ~filters.COMMAND, bonus_calc_compute)
            ]
        },
        fallbacks=[]
    )
    app.add_handler(calc_conv)
    app.add_handler(CallbackQueryHandler(filter_reset, pattern="^flt_reset$"))
    # standalone handler ‚Äî —Å–æ–∑–¥–∞—ë—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
    app.add_handler(pub_wizard)
    app.add_handler(close_conv)

    # --- Signed contract upload handler ---
    app.add_handler(
        MessageHandler(
            filters.Document.ALL & ~filters.FORWARDED,
            receive_signed_doc
        )
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(task_details_cb, pattern=r"^task_\d+"))
    app.add_handler(CallbackQueryHandler(upload_contract_cb, pattern=r"^upload_contract_\d+$"))

    # --- Admin order details & status ---
    app.add_handler(CallbackQueryHandler(admin_order_card,   pattern=r"^admin_order_\d+$"))
    app.add_handler(CallbackQueryHandler(admin_list_status, pattern=r"^admin_change_\d+$"))
    app.add_handler(CallbackQueryHandler(admin_set_status, pattern=r"^setstat_[a-z_]+_\d+$"))
        # --- Navigator cancels own order ---
    app.add_handler(CallbackQueryHandler(nav_cancel_order, pattern=r"^nv_cancel_\d+$"))
    # --- Cabinet & navigation callbacks ---
    app.add_handler(CallbackQueryHandler(show_cabinet, pattern="^back_to_cabinet$"))
    app.add_handler(CallbackQueryHandler(cabinet_work_cb, pattern="^cab_work$"))
    app.add_handler(CallbackQueryHandler(cabinet_page_cb, pattern=r"^cab_\d+$"))
    app.add_handler(CallbackQueryHandler(cabinet_arch_page_cb, pattern=r"^cab_arch_\d+$"))
    app.add_handler(CallbackQueryHandler(archive_details_cb, pattern=r"^arch_\d+$"))

    # --- Admin category navigation ---
    app.add_handler(CallbackQueryHandler(admin_choose_category, pattern=r"^admin_cat_(?:current|archive)$"))
    app.add_handler(CallbackQueryHandler(show_admin_panel, pattern="^admin_back_main$"))

    # --- Start the bot ---
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    app.run_polling()


# --- Admin token menu handlers ---
async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
        # Remove wallet banner if present
    banner = context.user_data.pop("last_bot_msg_banner", None)
    if banner:
        try:
            await banner.delete()
        except:
            pass
    """
    Show the main admin panel, usable from both direct messages and callback queries.
    """
    # Determine user and chat based on update type
    if update.callback_query:
        q = update.callback_query
        await q.answer()
        user = q.from_user
        chat_id = q.message.chat.id
    else:
        msg = update.message
        user = msg.from_user
        chat_id = msg.chat.id

    # Only admins allowed
    if user.id not in ADMINS:
        return

    # Fetch overview data
    try:
        ov = requests.get(f"{SERVER_URL}/admin/overview", timeout=4).json()
        txt = "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*\n"
        txt += f"üß≠ –ù–∞–≤–∏–≥–∞—Ç–æ—Ä—ã: {ov.get('cust_agents', 0)}\n"
        txt += f"üöö –î—Ä–∞–π–≤–µ—Ä—ã: {ov.get('exec_agents', 0)}\n"
        txt += f"üì¶ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {ov.get('orders_total', 0)}\n"
        txt += f"üí∏ –ü—Ä–∏–±—ã–ª—å (—Å—É—Ç–∫–∏): {ov.get('profit_day', 0)} ‚ÇΩ\n\n"
        txt += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–æ–∫:"
    except Exception:
        txt = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–æ–∫:"

    kb = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton(ADMIN_CURRENT_LABEL, callback_data="admin_cat_current")],
            [InlineKeyboardButton(ADMIN_ARCHIVE_LABEL,  callback_data="admin_cat_archive")],
            [InlineKeyboardButton(TOKEN_MENU_LABEL,     callback_data="admin_token_menu")],
        ]
    )

    # First, show the standard bottom ReplyKeyboard (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
    try:
        # Determine role for main menu
        try:
            prof = await _http_get_json(f"{SERVER_URL}/agent/{user.id}")
            role = prof.get("agent_type")
        except Exception:
            role = context.user_data.get("role")
        main_menu = await send_main_menu(context.bot, user.id, role)
        context.user_data["last_bot_msg"] = main_menu
    except Exception:
        pass

    # Then display the admin panel text with inline buttons
    if update.callback_query:
        await q.edit_message_text(txt, parse_mode="Markdown", reply_markup=kb)
    else:
        await context.bot.send_message(chat_id, txt, parse_mode="Markdown", reply_markup=kb)


async def admin_token_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    kb = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton(TOKEN_CUST_LABEL, callback_data="admin_token_cust")],
            [InlineKeyboardButton(TOKEN_EXEC_LABEL, callback_data="admin_token_exec")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_main")],
        ]
    )
    await q.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞:", reply_markup=kb)

async def admin_token_generate_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Generate one-time invite token for selected role."""
    query = update.callback_query
    await query.answer()

    role_code = query.data.split("_")[-1]
    role = "–∑–∞–∫–∞–∑—á–∏–∫" if role_code == "cust" else "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"

    txt = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω."
    try:
        resp = requests.post(
            f"{SERVER_URL}/admin/invite",
            json={"role": role},
            timeout=4,
        )
        if resp.status_code == 200:
            data = resp.json()
            token = data.get("token")
            link = data.get("deep_link")
            txt = (
                f"<b>–¢–æ–∫–µ–Ω –¥–ª—è {_role_label(role)}</b>:\n"
                f"<code>{token}</code>\n\n"
                f"{link}"
            )
    except Exception as e:
        print("admin_token_generate error:", e)

    await query.edit_message_text(
        txt,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_token_menu")]]
        ),
    )
    return TOK_DONE

# --- Stub admin handlers (to be implemented) -------------------------------
async def admin_choose_category(update, context):
    """Handle "Current" and "Archive" admin buttons by invoking list views."""
    q = update.callback_query
    await q.answer()
    cat = q.data.split("_")[-1]  # "current" or "archive"
    chat_id = q.message.chat.id

    from types import SimpleNamespace
    # Build a fake message object for downstream handlers
    fake_msg = SimpleNamespace(
        text = TASKS_TEXT if cat == "current" else HISTORY_LABEL,
        chat = SimpleNamespace(id=chat_id),
        reply_text = q.message.reply_text
    )
    fake_update = SimpleNamespace(message=fake_msg, effective_user=q.from_user)

    if cat == "current":
        await show_tasks(fake_update, context)
    else:
        await show_history(fake_update, context)

async def admin_list_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –∑–∞—è–≤–∫–∏."""
    q = update.callback_query
    await q.answer()
    order_id = int(q.data.split("_")[-1])

    # –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ç –∂–µ)
    try:
        cur = requests.get(f"{SERVER_URL}/orders/{order_id}", timeout=4).json().get("status", "")
    except Exception:
        cur = ""

    STATUSES = [
        ("active",      "üÜï –ê–∫—Ç–∏–≤–Ω–∞"),
        ("confirmed",   "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"),
        ("in_progress", "üöö –í —Ä–∞–±–æ—Ç–µ"),
        ("done",        "üì¶ –ò—Å–ø–æ–ª–Ω–µ–Ω–∞"),
        ("paid",        "üí∞ –û–ø–ª–∞—á–µ–Ω–∞"),
        ("cancelled",   "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞"),
    ]

    buttons = [
        [InlineKeyboardButton(label, callback_data=f"setstat_{code}_{order_id}")]
        for code, label in STATUSES if code != cur
    ]
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_order_{order_id}")])

    await q.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞—è–≤–∫–∏ #{order_id}:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def admin_set_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    # Parse callback: setstat_<status>_<order_id>
    payload = q.data[len("setstat_"):]          # "in_progress_120"
    status, order_id_str = payload.rsplit("_", 1)
    order_id = int(order_id_str)

    # Call backend
    ok = False
    try:
        resp = requests.patch(
            f"{SERVER_URL}/admin/order/{order_id}/status/{status}",
            timeout=6
        )
        ok = resp.status_code == 200
    except Exception as e:
        print("admin_set_status request error:", e)

    if ok:
        status_ru = {
            "active": "–ê–∫—Ç–∏–≤–Ω–∞",
            "confirmed": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
            "in_progress": "–í —Ä–∞–±–æ—Ç–µ",
            "done": "–ò—Å–ø–æ–ª–Ω–µ–Ω–∞",
            "paid": "–û–ø–ª–∞—á–µ–Ω–∞",
            "cancelled": "–û—Ç–º–µ–Ω–µ–Ω–∞",
        }.get(status, status)
        try:
            update_request(order_id, {"status": status_ru})
        except Exception as e:
            print("Sheets update_request error:", e)

    await q.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ." if ok else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å.")

    # Refresh order card without mutating original CallbackQuery
    from types import SimpleNamespace
    fake_q = SimpleNamespace(
        data=f"admin_order_{order_id}",
        message=q.message,
        from_user=q.from_user,
        answer=q.answer,
        edit_message_text=q.edit_message_text
    )
    fake_update = SimpleNamespace(callback_query=fake_q)
    await admin_order_card(fake_update, context)

async def admin_order_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å –∫–Ω–æ–ø–∫–æ–π —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞."""
    q = update.callback_query
    # CallbackQuery may have already been answered upstream (e.g., after a status change).
    # A repeated answer() call on the *same* query raises `BadRequest: query is too old or invalid`.
    # Wrap in try/except to avoid crashing the handler.
    try:
        await q.answer()
    except Exception:
        pass
    parts = q.data.split("_")
    # Extract order ID as the last segment of callback_data
    order_id = int(parts[-1])
    try:
        r = requests.get(f"{SERVER_URL}/orders/{order_id}", timeout=4)
        if r.status_code != 200:
            await q.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")
            return
        detail = r.json()
    except Exception as e:
        await q.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    # --- Build details text and keyboard (unchanged logic) ---
    STATUS_LABELS = {
        "active":      "üÜï –ê–∫—Ç–∏–≤–Ω–∞",
        "confirmed":   "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
        "in_progress": "üöö –í —Ä–∞–±–æ—Ç–µ",
        "done":        "üì¶ –ò—Å–ø–æ–ª–Ω–µ–Ω–∞",
        "paid":        "üí∞ –û–ø–ª–∞—á–µ–Ω–∞",
        "new":         "üÜï –í –æ–∂–∏–¥–∞–Ω–∏–∏",
        "completed":   "üì¶ –ò—Å–ø–æ–ª–Ω–µ–Ω–∞",
        "archived":    "üìÇ –ê—Ä—Ö–∏–≤",
        "cancelled":   "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞",
    }
    status = detail.get("status", "")
    status_line = f"üìã –°—Ç–∞—Ç—É—Å: {STATUS_LABELS.get(status, status)}\n"
    header = f"[#{detail['id']}] {detail['message']}"
    sections = [status_line + header]
    if detail.get("loads"):
        sections.append("üìç –ü—É–Ω–∫—Ç—ã –ø–æ–≥—Ä—É–∑–∫–∏:")
        for i, l in enumerate(detail["loads"], start=1):
            sections.append(f"  {i}. {l.get('place','')} ({l.get('date','')})")
        sections.append("")
    if detail.get("unloads"):
        sections.append("üìç –ü—É–Ω–∫—Ç—ã –≤—ã–≥—Ä—É–∑–∫–∏:")
        for i, u in enumerate(detail["unloads"], start=1):
            sections.append(f"  {i}. {u.get('place','')} ({u.get('date','')})")
        sections.append("")
    cars = detail.get("cars", [])
    if cars:
        car_strings = []
        for car in cars:
            b = car.get("brand", "").strip()
            m = car.get("model", "").strip()
            name = f"{b} {m}".strip()
            car_strings.append(f"1√ó{name}")
        sections.append(f"üöö –ì—Ä—É–∑: {'; '.join(car_strings)}")
    else:
        car_count = detail.get("car_count")
        car_models = detail.get("car_models", "").strip()
        if car_count and car_models:
            sections.append(f"üöö –ì—Ä—É–∑: {car_count}√ó{car_models}")
    budget_text = detail.get("budget", "")
    if budget_text:
        sections.append(f"üíµ –°—Ç–∞–≤–∫–∞ (–∑–∞–∫–∞–∑—á–∏–∫): {budget_text}")
        customer_amt = _clean_money(budget_text)
        exec_amt = int(customer_amt * 0.88)
        nav_bonus = int(customer_amt * 0.03)
        sections.append(f"üíµ –°—Ç–∞–≤–∫–∞ (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å): {exec_amt:,} —Ä—É–±".replace(",", " "))
        sections.append(f"üèÜ –ë–æ–Ω—É—Å –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞: +{nav_bonus:,} ‚ÇΩ".replace(",", " "))
    pay_terms_text = detail.get("pay_terms", "")
    if pay_terms_text:
        sections.append(f"üí≥ –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã: {pay_terms_text}")
    bonus_exec = detail.get("reward_exec") or 0
    bonus_cust = detail.get("reward_cust") or 0
    sections.append(f"üèÜ –ë–æ–Ω—É—Å –∑–∞–∫–∞–∑—á–∏–∫–∞: +{fmt_money(bonus_cust)} ‚ÇΩ")
    sections.append(f"üèÜ –ë–æ–Ω—É—Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: +{fmt_money(bonus_exec)} ‚ÇΩ")
    text = "\n".join(sections)
    kb_buttons = [
        [InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"admin_change_{order_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_cabinet")]
    ]
    kb = InlineKeyboardMarkup(kb_buttons)
    # --- send details, but fall back if text is too long or edit fails ---
    try:
        if len(text) > 4000:
            # Telegram edit limit is 4096; safer to delete and send a fresh message
            await q.message.delete()
            await context.bot.send_message(
                chat_id=q.from_user.id,
                text=text[:4090],
                reply_markup=kb
            )
        else:
            await q.edit_message_text(text, reply_markup=kb)
    except Exception as e:
        # Any failure (e.g., BadRequest), send as new message
        try:
            await context.bot.send_message(
                chat_id=q.from_user.id,
                text=text[:4090],
                reply_markup=kb
            )
        except Exception as ex:
            print("admin_order_card send error:", ex)

# ---------- entrypoint ----------
if __name__ == "__main__":
    main()